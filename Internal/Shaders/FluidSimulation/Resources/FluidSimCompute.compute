#pragma kernel CreateGrid
#pragma kernel UpdateParticles
#pragma kernel ComputeDensity
#pragma kernel ComputeForces
#pragma kernel UpdatePositionDeltas
#pragma kernel UpdatePositions
#pragma kernel HashParticles
#pragma kernel BitonicSort
#pragma kernel CalculateCellOffsets
#pragma kernel CalculateCurl
#pragma kernel CalculateVorticity
#pragma kernel PrefixSum

#include "../../ShaderHelpers.hlsl"
float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;
float4x4 _ParentTransform;
float4x4 _CameraWorldToLocal;
float4x4 _ParentTransformToLocal;

float epsilon = 0.00001;
float _SizeOfParticle;
float _Smoothness;
float4 _DepthScale = 1;
float3 _LightSource;
float3 _LightScale;
float3 worldSpaceViewForward;
bool _IsOrthographic;
float _Radius = 1;
float _GasConstant;
float _BoundsDamping;
float _Viscosity;
float _RestDensity;
float _TimeStep = 2;
float _BoundDamping = 0.2;
float3 _BoxSize;
int _NumOfNodes;
int _FrustrumSize = 10;
uint _NumOfParticles;
uint _MaxNumOfParticles;
const uint MaxNeighbors = 50;
int biBlock;
int biDim;
int _ChosenParticle = 128;



struct MeshObject
{
    float4x4 localToWorld;
    int indicesOffset;
    int indicesCount;
    float3 position;
    float3 AABBMin;
    float3 AABBMax;
    float3 color;
    float emission;
    float smoothness;
    float transparency;
    float absorbtion;
    float celShaded;
    uint id;
};

struct Vertex
{
    float3 position;
    float3 normal;
    float2 uv;
};

struct Ray
{
    float3 o;
    float3 d;
    float3 color;
    float3 energy;
    int bounces;
};

struct Hit
{
    float3 position;
    float distance;
    float3 normal;
    float3 color;
    float2 uv;
    float depth;
    Vertex vertices[3];
    MeshObject meshObj;
};

struct Particle
{
    float4 force;
    float3 position;
    float3 lastPosition;
    float3 predictedPosition;
    float3 positionDelta;
    float3 debugVector;
    float3 velocity;
    float3 normal;
    float3 curl;
    float density;
    float lambda;
    float mass;
    int cellID;
};

struct BVHNode
{
    float3 aabbMin;
    float3 aabbMax;
    int leftChild;
    int rightChild;
    int parent;
    int primitiveOffset;
    int primitiveCount;
    int index;
    int hit;
    int miss;
};

StructuredBuffer<MeshObject> _MeshObjects;
StructuredBuffer<Vertex> _Vertices;
StructuredBuffer<int> _Indices;
RWStructuredBuffer<Particle> _Particles;
RWStructuredBuffer<int> _ParticleIndices;
RWStructuredBuffer<int> _ParticleCellIndices;
RWStructuredBuffer<int> _ParticleCellOffsets;
RWStructuredBuffer<int> _ParticleCount;
StructuredBuffer<BVHNode> _BVHNodes;
StructuredBuffer<int> _ParticleIDs;
uint numOfStructs, sizeOfStrides, numOfParticles, sizeOfParticlesStrides;
float density = 0.0;
int _BoxViewDebug;

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
RWTexture2D<float4> DensityMap;
RWTexture2D<float4> NormalMap;

RWTexture2D<float4> _ColorFieldNormalMap;
RWTexture2D<float4> _VelocityMap;
RWTexture2D<float4> _CurlMap;

Vertex CreateVertex(inout Vertex v)
{
    v.position = float3(0, 0, 0);
    v.normal = float3(0, 0, 0);
    v.uv = float2(0, 0);
    return v;
}


Ray CreateRay(float3 og, float3 dir, float2 pixel)
{
    Ray ray;
    ray.o = og;
    ray.d = dir;
    ray.color = float3(1, 1, 1);
    ray.energy = float3(0, 0, 0);
    ray.bounces = 0;
    return ray;
}

Hit CreateHit()
{
    Hit hit;
    hit.normal = 0;
    hit.position = 0;
    hit.distance = 1500;
    hit.color = float3(0, 0, 0);
    hit.depth = 0;

    Vertex v0, v1, v2;
    CreateVertex(v0);
    CreateVertex(v1);
    CreateVertex(v2);
    hit.vertices[0] = v0;
    hit.vertices[1] = v1;
    hit.vertices[2] = v2;

    hit.uv = 0;
    hit.meshObj = _MeshObjects[0];
    
    return hit;
}


float4x4 translate(float3 p)
{
    return float4x4 (1.0, 0.0, 0.0, 0.0,
        0.0, 1.0, 0.0, 0.0,
        0.0, 0.0, 1.0, 0.0,
        p.x, p.y, p.z, 1.0);
}

float Poly6Kernel(float distance2)
{
    float result = 0.0;
    float h = 1;

    if (0.0f < distance2 && distance2 < h)
    {

        float h9 = pow(h, 9.0f);
        float constPoly6 = 315.0f / (64.0f * UNITY_PI * h9);
        float poly6 = constPoly6 * pow((h * h) - (distance2 * distance2), 3.0f);
        result = poly6;
    }
    return result;
}

float3 Poly6GradientKernel(float distance2, float3 direction)
{
    float3 result = 0.0;
    float h = 1;

    float h9 = pow(h, 9.0f);
    float constPoly6 = -945.0f / (32.0f * UNITY_PI * h9);
    float3 poly6 = constPoly6 * direction * pow((h * h) - (distance2 * distance2), 2.0f);
    result = poly6;
    return result;
}

float SpikyKernelD1(float distance)
{
	float h6 = pow(_Radius, 6.0f);
	float spikyConst = 45.0f / (UNITY_PI * h6);
	float spikyKern = spikyConst * pow(_Radius - distance, 2.0f);
    return spikyKern;
}

float SpikyKernelD2(float distance)
{
	float h = 1.0f - distance / _Radius;
    return 90.0f / (UNITY_PI * pow(_Radius, 5.0f)) * h;
}

float3 SpikyKernelGradient(float distance2, float3 direction)
{
    float3 result = 0.0;
    float h = 1;
    if (0.0f  < distance2 && distance2 < h)
    {
        float m = pow(h - distance2, 2.0f);
        float h6 = pow(h, 6.0f);
        float spikyConst = -45.0f / (UNITY_PI);
        float3 spikyKern = (spikyConst * m / (h6 * distance2)) * direction;
        result = spikyKern;
    }
    return result;
}

Ray CreateCameraRay(float2 uv)
{
	//Get the world position of the origin, which is basically just the camera.
	// Last column contains position, take that.
    float3 og = mul(_CameraInverseProjection, float4(uv, -1, 1)).xyz;
    og = mul(_CameraToWorld, float4(og, 1)).xyz;

	//The scene has a depth to it. The project matrix takes the depth and places it flat onto a 2D plane.
	//The inverse projection does this process backwards. By multiplying it we go backwards.
    float3 dir = float3(0,0,0);
    dir = worldSpaceViewForward;
    if (_IsOrthographic)
        dir = worldSpaceViewForward;
    else
    {
        dir = mul(_CameraInverseProjection, float4(uv, -1, 1)).xyz;
        dir = mul(_CameraToWorld, float4(dir, 0)).xyz; //Take this 3D pixel point and make it world position.
    }
    

    dir = normalize(dir);
    return CreateRay(og, dir, uv);
}

int3 GetCell(float3 position)
{
    float3 halfS = _BoxSize / 2;
    return int3((position.x + halfS.x) / _Radius, (position.y + halfS.y) / _Radius, (position.z + halfS.z) / _Radius);
}

inline uint HashCell(in int3 cellIndex)
{
	const uint p1 = 73856093;
	const uint p2 = 19349663;
	const uint p3 = 83492791;
    
	uint n = p1 * cellIndex.x ^ p2 * cellIndex.y ^ p3 * cellIndex.z;
	n %= _NumOfParticles;
    return n;
}

//Moller method.
bool TriangleTrace(Ray ray, float3 a, float3 b, float3 c, inout float t, inout float u, inout float v)
{
    float3 edge1 = b - a;
    float3 edge2 = c - a;

    float3 pvec = cross(ray.d, edge2);

    float determinate = dot(edge1, pvec);

    if (determinate < epsilon)
        return false;

    float3 tvec = ray.o - a;
    float inv_det = 1.0 / determinate;

    u = dot(tvec, pvec) * inv_det;
    if (u < 0.0 || u > 1.0)
    {
        return false;
    }

    float3 qvec = cross(tvec, edge1);
    v = dot(ray.d, qvec) * inv_det;
    if (v < 0.0 || u + v > 1.0)
    {
        return false;
    }

    //Final calculate of T after crammer's rule.
    t = dot(edge2, qvec) * inv_det;

    return true;
}


//Ray slabs test for AABB.
bool TraceAABB(inout Ray ray, inout Hit hit, MeshObject meshObject)
{
    float3 invRayDir = 1.0 / ray.d;
    float3 tLower = (meshObject.AABBMin - ray.o) * invRayDir;
    float3 tUpper = (meshObject.AABBMax - ray.o) * invRayDir;

    float4 tMin = float4(min(tLower, tUpper), 0);
    float4 tMax = float4(max(tLower, tUpper), 10000000);

    //get max component of tMin.
    float tBoxMin = max(max(tMin.x, tMin.y), tMin.z);
    //get min component of tMax.
    float tBoxMax = min(min(tMax.x, tMax.y), tMax.z);

	return (tBoxMin <= tBoxMax) && (tBoxMax < 99999) && (tBoxMin > epsilon);
}

bool TraceBVH(inout Ray ray, inout Hit hit, BVHNode node)
{
    float3 invRayDir = 1.0 / ray.d;
    float3 tLower = (node.aabbMin - ray.o) * invRayDir;
    float3 tUpper = (node.aabbMax - ray.o) * invRayDir;

    float4 tMin = float4(min(tLower, tUpper), 0);
    float4 tMax = float4(max(tLower, tUpper), 10000000);

    //get max component of tMin.
    float tBoxMin = max(max(tMin.x, tMin.y), tMin.z);
    //get min component of tMax.
    float tBoxMax = min(min(tMax.x, tMax.y), tMax.z);

    return (tBoxMin <= tBoxMax);
}

float TraceBVHF(inout Ray ray, inout Hit hit, BVHNode node)
{
    float3 invRayDir = 1.0 / ray.d;
    float3 tLower = (node.aabbMin - ray.o) * invRayDir;
    float3 tUpper = (node.aabbMax - ray.o) * invRayDir;

    float4 tMin = float4(min(tLower, tUpper), 0);
    float4 tMax = float4(max(tLower, tUpper), 10000000);

    //get max component of tMin.
    float tBoxMin = max(max(tMin.x, tMin.y), tMin.z);
    //get min component of tMax.
    float tBoxMax = min(min(tMax.x, tMax.y), tMax.z);

    if (tBoxMin <= tBoxMax)
        return tBoxMin;
    return 9999999;
}

bool TraceMesh(inout Ray ray, inout Hit hit, MeshObject meshObject)
{
    uint offset = meshObject.indicesOffset;
    uint count = offset + meshObject.indicesCount;
    float3 tuv = 0;

    for (uint i = offset; i < count; i += 3)
    {
        float3 vp0 = (mul(meshObject.localToWorld, float4(_Vertices[_Indices[i]].position, 1))).xyz;
        float3 vp1 = (mul(meshObject.localToWorld, float4(_Vertices[_Indices[i + 1]].position, 1))).xyz;
        float3 vp2 = (mul(meshObject.localToWorld, float4(_Vertices[_Indices[i + 2]].position, 1))).xyz;

        if (TriangleTrace(ray, vp0, vp1, vp2, tuv.x, tuv.y, tuv.z))
        {
            float t = tuv.x;
            if (t > 0 && t < hit.distance)
            {
                //float3 PointPosition = (mul(meshObject.localToWorld, float4(ray.o + t * ray.d, 1))).xyz;
                //Set the vertices
                hit.vertices[0] = _Vertices[_Indices[i]];
                hit.vertices[1] = _Vertices[_Indices[i + 1]];
                hit.vertices[2] = _Vertices[_Indices[i + 2]];
                hit.distance = t;
                hit.uv = float2(tuv.y, tuv.z);
                hit.position = ray.o + t * ray.d;
                hit.meshObj = meshObject;
                return true;
            }
        }
    }
    return false;
}

//Gets how many particles are in this ray, from main directional light to last particle.
float GetDensityOfParticle(in Hit hit, in Ray ray)
{
    int particleDensity = 0; //This will be the density later on.
    float squaredDepthOfParticle = sqrt(numOfParticles)*25;

    for (int i = 0; i < numOfParticles; i++)
    {
        //Shoot ray to the direction of the light.
        float3 rayOrig = hit.position; //Start from the hit position, then shoot towards light.
        float3 rayDir = normalize(_LightSource - rayOrig);
		float3 center = _Particles[i].position;
        
        rayDir = normalize(_LightSource - rayOrig);
        //center = mul(_ParentTransform, float4(center, 1)).xyz;
        
        float t1 = sphIntersect(rayOrig, rayDir, float4(center, 0.5));
        
        //If it hit a particle add that to the total number of particles to obtain density.
        if (t1 > epsilon)
        {
            //New point is now the nearest particle.
            rayOrig = rayOrig + rayDir * (t1 + epsilon * 100);

            particleDensity++;
        }
    }

    //Now we do an attenuation, which is the y/x^2.
    return 2.55* particleDensity / (squaredDepthOfParticle);
    
}

//Intersects particles with the ray being casted. Used to render particles.
float IntersectParticles(inout Hit hit, in Ray ray, float radius, float3 center)
{
	float3 rayOrig = ray.o;
	float3 rayDir = ray.d;
	//center = mul(_ParentTransform, float4(center, 1)).xyz;

    //Get box transformation matrix.
	float4x4 tra = translate(center);
    float4x4 txi = tra;
    float4x4 txx = inverse2(txi);
    float t1 = 0;
	float3 rad = float3(radius, radius, radius);
    
    //Intersect with a box and then smoothly combine boxes together with union operation.
    float4 tNFnorm = sphIntersect(rayOrig, rayDir, float4(center, rad.x));//boxIntersection2(rayOrig, rayDir, txx, txi, rad);//sphIntersect(rayOrig, rayDir, float4(center, rad.x));//boxIntersection2(rayOrig, rayDir, txx, txi, rad);
	t1 = tNFnorm.x;
    t1 = opU(t1, hit.distance);
    return t1;
}

int nextNode(in BVHNode node, in Ray ray, in Hit hit, int nodeIndex)
{
    if(node.leftChild != -1)
	{
		return node.leftChild;
	}
    if (node.rightChild != -1)
    {
        return node.rightChild;
    }

    while (node.parent > -1)
    {
        //If I am the left child, and my parent has right child...go to the right child.
        if (node.index == _BVHNodes[node.parent].leftChild && _BVHNodes[node.parent].rightChild != -1)
        {
            return _BVHNodes[node.parent].rightChild;
        }
        node = _BVHNodes[node.parent];
    }

    return -1;
}

float TraceParticlesBVH(inout Ray ray, inout Hit hit)
{
    float minDistance = 99999999;

    int nodeIndex = 0;
    int currentNode = 0;
    BVHNode node = _BVHNodes[currentNode];
    bool particleHit = false;
    
    int numOfTimes = 0;
    while (particleHit == false)
    {

        if (node.primitiveCount > 0 )
        {
            if (TraceBVH(ray, hit, node))
            {
                for (int k = node.primitiveOffset; k < node.primitiveCount + node.primitiveOffset; k++)
                {
                    float3 position = _Particles[_ParticleIDs[k]].position;

                    float t1 = IntersectParticles(hit, ray, _SizeOfParticle, position);

                    if (t1 > epsilon && t1 < minDistance)
                    {
                        minDistance = t1;
                    }
                    numOfTimes++;
                }
                //particleHit = true;

                
            }
            currentNode = nextNode(node, ray, hit, currentNode);
        }
        else if (!TraceBVH(ray, hit, _BVHNodes[node.leftChild]) && node.rightChild != -1)
        {
            numOfTimes++;
            currentNode = node.rightChild;
        }
        else if (!TraceBVH(ray, hit, _BVHNodes[node.rightChild]) && node.leftChild != -1)
        {
            numOfTimes++;
            currentNode = node.leftChild;
        }
        else
        {
            numOfTimes++;
            currentNode = nextNode(node, ray, hit, currentNode);
        }
        nodeIndex++;

        //currentNode = nextNode(node, ray, hit, currentNode);
        node = _BVHNodes[currentNode];

        if (nodeIndex >= numOfParticles || currentNode == -1)
        {
            particleHit = true;
            break;
        }
    }
    
    return minDistance;
}

float TraceParticlesBVHIterative(inout Ray ray, inout Hit hit)
{
    float minDistance = 99999999;
    BVHNode node = _BVHNodes[0];
    for (int i = 0; i < _NumOfNodes; i++)
    {
		node = _BVHNodes[i];
        if (TraceBVH(ray, hit, node))
        {
            if (node.primitiveCount > 0)
            {
                for (int k = node.primitiveOffset; k < node.primitiveCount + node.primitiveOffset; k++)
                {
                    float3 position = _Particles[_ParticleIDs[k]].position;

                    float t1 = IntersectParticles(hit, ray, _SizeOfParticle, position);

                    if (t1 > epsilon && t1 < minDistance)
                    {
                        minDistance = t1;
                    }
                }
            }
        }
    }
	return minDistance;
}

float4 TraceParticlesTBVH(inout Ray ray, inout Hit hit)
{
    float minDistance = 99999999;
	float minBVHDistance = 99999999;
    int bvhminIndex = -1;
    int nodeIndex = 0;
	int particleIndex = -1;
    float particlesHit = 0;
    BVHNode node = _BVHNodes[0];
    for (int i = 0; i < _NumOfNodes; i++)
    {
        //Find next node.
        if (nodeIndex != i)
            continue;
        node = _BVHNodes[nodeIndex];
        if (TraceBVH(ray, hit, node))
        {
            for (int k = node.primitiveOffset; k < node.primitiveCount + node.primitiveOffset; k++)
            {
                float3 position = _Particles[_ParticleIDs[k]].position;

                float t1 = IntersectParticles(hit, ray, _SizeOfParticle, position);

                if (t1 > epsilon)
                {
                    particlesHit += 1.0f;
                    if (t1 < hit.distance)
                    {
                        float4 clipPos = UnityWorldToClipPos(position);
                        float depth = (clipPos.z * _DepthScale.x) / (clipPos.w * _DepthScale.y);
                        hit.depth = 1.0 - depth;
                        hit.distance = t1;
                        particleIndex = _ParticleIDs[k];
                    }
                }
            }

            nodeIndex = node.hit;
        }
        else
        {

            nodeIndex = node.miss;
        }

    }
    float kd = min(99.0f, particlesHit) * 0.0055f;
    float e = exp(kd);
    float hitMap = e - 1.0f;
    return float4(minDistance, hitMap, minDistance, particleIndex);
}


float TraceParticlesIterative(inout Ray ray, inout Hit hit)
{
    float minDistance = 99999999;
    for (int k = 0; k < numOfParticles; k++)
    {
        float3 position = _Particles[k].position;

        float t1 = IntersectParticles(hit, ray, _SizeOfParticle, position);

        if (t1 > epsilon && t1 < minDistance)
        {
            minDistance = t1;
        }
    }
    return minDistance;
}

float4 SceneTrace(inout Ray ray, inout Hit hit, out int particleId, out float particlesHit)
{

    float4 result = 99999999;
    float minDistance = 99999999;
	particleId = -1;
    particlesHit = 0.0f;

    for (int k = 0; k < numOfStructs; k++)
    {
        MeshObject meshObject = _MeshObjects[k];
        if (TraceAABB(ray, hit, meshObject) == true)
        {
            TraceMesh(ray, hit, meshObject);
        }

    }
    
    result = TraceParticlesTBVH(ray, hit);
	minDistance = result.x;
	particlesHit = result.y;
	particleId = result.w;
    //minDistance = TraceParticlesIterative(ray, hit);
    float3 position = ray.o + hit.distance * ray.d;
    //position *= hit.distance < 1499;
    //if(particleID == _ChosenParticle)
    if (_IsOrthographic)
    {
        hit.depth *= 100;
    }
    return float4(position.xyz, hit.depth);

	//return float4(1,1,1, depth);
    
}

void CollisionTrace(inout Ray ray, inout Hit hit)
{
    for (int k = 0; k < numOfStructs; k++)
    {
        MeshObject meshObject = _MeshObjects[k];
        if (TraceAABB(ray, hit, meshObject) == true)
        {
            TraceMesh(ray, hit, meshObject);
        }

    }

    MeshObject meshObject = hit.meshObj;
    Vertex v0 = hit.vertices[0];
    Vertex v1 = hit.vertices[1];
    Vertex v2 = hit.vertices[2];
    //Convert to world space along with ray and compute the barycentric coordinate.
    v0.position = (mul(meshObject.localToWorld, float4(v0.position, 1))).xyz;
    v1.position = (mul(meshObject.localToWorld, float4(v1.position, 1))).xyz;
    v2.position = (mul(meshObject.localToWorld, float4(v2.position, 1))).xyz;
    v0.normal = (mul(meshObject.localToWorld, float4(v0.normal, 0))).xyz;
    v1.normal = (mul(meshObject.localToWorld, float4(v1.normal, 0))).xyz;
    v2.normal = (mul(meshObject.localToWorld, float4(v2.normal, 0))).xyz;
    float3 barycentric = Barycentric(v0.position, v1.position, v2.position, hit.position);

    //Now that we have the barycentric coordinate we can use this to reconstruct the UVs.
    float2 uvs = v0.uv * barycentric.x + v1.uv * barycentric.y + v2.uv * barycentric.z;

    float3 normals = normalize(v0.normal * barycentric.x + v1.normal * barycentric.y + v2.normal * barycentric.z);

    hit.normal = normals;
    hit.uv = uvs;
    
}

[numthreads(32,32,1)]
void CreateGrid (uint3 id : SV_DispatchThreadID)
{
    //Create grid of spheres in 3D.
    
    density = 0;
    uint width, height;
    worldSpaceViewForward = -UNITY_MATRIX_I_V._m02_m12_m22;
    _MeshObjects.GetDimensions(numOfStructs, sizeOfStrides);
	_Particles.GetDimensions(numOfParticles, sizeOfParticlesStrides);
    Result.GetDimensions(width, height);


	//This is a ray for each pixel and in the pixel's center.
	//So id.xy is this pixel, then offsetted to center, then divided by the width and height to get said center.
	//Then range is shifted via 2 - 1.
    float2 pixel = ((id.xy + float2(0.5, 0.5)) / float2(width, height)) * 2 - 1; //Note in HLSL this vector v - scalar is applied to each element in v.
    Ray ray = CreateCameraRay(pixel);
    Hit hit = CreateHit();

    int particleId = -1;
	float particlesHit = 0;
    float4 tracedPoint = SceneTrace(ray, hit, particleId, particlesHit);
    Result[id.xy] = float4(tracedPoint.xyz, tracedPoint.w);
    _ColorFieldNormalMap[id.xy] = 0;
    _VelocityMap[id.xy] = 0;
    _CurlMap[id.xy] = 0;
    DensityMap[id.xy] = particlesHit;
    
    if (particleId >= 0)
    {
		Particle particle = _Particles[particleId];
        //DensityMap[id.xy] = float4(particle.normal,1);
        _ColorFieldNormalMap[id.xy] = float4(particle.normal, 1);
		_VelocityMap[id.xy] = float4(particle.velocity, 1);
        _CurlMap[id.xy] = float4(_Particles[particleId].curl, 1);
        
    }
}

[numthreads(64, 1, 1)]
void ComputeForces(uint3 id : SV_DispatchThreadID)
{
    //Good.
	if (id.x >= _NumOfParticles)
	{
		return;
	}

	float4 constantForces = float4(0.0, -9.8, 0.0, 0.0);
    _Particles.GetDimensions(numOfParticles, sizeOfParticlesStrides);
    float4 forces = _Particles[id.x].force +constantForces;
    float3 vel = _Particles[id.x].velocity;
    vel += forces.xyz * _TimeStep;
    _Particles[id.x].force = forces;
    _Particles[id.x].velocity = vel;
    _Particles[id.x].lastPosition = _Particles[id.x].position;
    _Particles[id.x].predictedPosition = _Particles[id.x].position + vel * _TimeStep;
    _Particles[id.x].debugVector = 0.25;
}

void GetDensityIterative(uint3 id)
{
    int numOfParticles = _NumOfParticles;
    //Loop through all particles comparing it to current particle.
    float3 oPos = _Particles[id.x].position;
    float sum = 0;
    //Check if that particle is in the radius.
    for (int i = 0; i < numOfParticles; i++)
    {
        float distance2 = distance(oPos, _Particles[i].position);//dot(oPos -_Particles[i].position , oPos - _Particles[i].position );
        sum += Poly6Kernel(distance2) * _Particles[i].mass;

    }
    _Particles[id.x].density = sum;
}

void GetDensityGrid(uint3 id)
{
    int numOfParticles = _NumOfParticles;
    uint particleIndex = _ParticleIndices[id.x];
    int3 cellIndex = GetCell(_Particles[particleIndex].predictedPosition);
    float densitySum = 0;
    float dNorm = 0;
    float3 spiky_i = 0;
    float3 colorField = 0;
    for (int i = -2; i <= 2; ++i)
    {
        for (int j = -2; j <= 2; ++j)
        {
            for (int k = -2; k <= 2; ++k)
            {
				int3 neighbourIndex = cellIndex + int3(i, j, k);
				uint hashedNeighborIndex = HashCell(neighbourIndex);
                uint neighbourIterator = _ParticleCellOffsets[hashedNeighborIndex];

                while (neighbourIterator != 99999999 && neighbourIterator < _NumOfParticles)
                {
					uint particleIndexB = _ParticleIndices[neighbourIterator];
                    
					if (_ParticleCellIndices[particleIndexB] != hashedNeighborIndex)
					{
						break;
					}
                    
					Particle neighbour = _Particles[particleIndexB];
                    float distance2 = distance(_Particles[particleIndex].predictedPosition, _Particles[particleIndexB].predictedPosition);
                    float3 pressureGradDir = _Particles[particleIndex].predictedPosition - _Particles[particleIndexB].predictedPosition;
                    
                    if (0.001f < distance2 && distance2 < _Radius * 2)
                    {
                        //Poly6
                        densitySum += Poly6Kernel(distance2) * _Particles[particleIndex].mass;
                        //Spiky
						float3 spiky = SpikyKernelGradient(distance2, pressureGradDir) / _RestDensity;
						spiky_i += spiky;
                        dNorm += dot(spiky, spiky);
                        colorField += _Particles[particleIndexB].mass * (1 / _Particles[particleIndexB].density) * Poly6GradientKernel(distance2, pressureGradDir);
                        if (particleIndex == _ChosenParticle)
                        {
                            //Set to color red.
                            _Particles[particleIndex].debugVector = float3(1, 0, 0);
                            _Particles[particleIndexB].debugVector = float3(0, 1, 0);
                        }
                    }
                    neighbourIterator++;
                }
            }
        }
    }
    //densitySum *= 0.8250;
    float constraint = (densitySum / _RestDensity) - 1;
	dNorm += dot(spiky_i, spiky_i);
    float lambda = -constraint / (dNorm + 1000.0f);
    _Particles[particleIndex].density = densitySum;
    //_Particles[particleIndex].debugVector += float3(0, 0, 1) * (densitySum / _RestDensity);
	_Particles[particleIndex].lambda = lambda;
    _Particles[particleIndex].normal = min(normalize(-colorField), float3(1,1,1));
}


//Figure (1)
[numthreads(64, 1, 1)]
void ComputeDensity(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= _NumOfParticles)
    {
        return;
    }
    
    GetDensityGrid(id);
}


[numthreads(64, 1, 1)]
void UpdatePositionDeltas(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= _NumOfParticles)
    {
        return;
    }
    
    int numOfParticles = _NumOfParticles;
    uint particleIndex = _ParticleIndices[id.x];
    int3 cellIndex = GetCell(_Particles[particleIndex].predictedPosition);

    float3 positionDelta = 0;
    

    for (int i = -2; i <= 2; ++i)
    {
        for (int j = -2; j <= 2; ++j)
        {
            for (int k = -2; k <= 2; ++k)
            {
                int3 neighbourIndex = cellIndex + int3(i, j, k);
                uint hashedNeighborIndex = HashCell(neighbourIndex);
                uint neighbourIterator = _ParticleCellOffsets[hashedNeighborIndex];

                while (neighbourIterator != 99999999 && neighbourIterator < _NumOfParticles)
                {
                    uint particleIndexB = _ParticleIndices[neighbourIterator];

                    if (_ParticleCellIndices[particleIndexB] != hashedNeighborIndex)
                    {
                        break;
                    }

                    if (particleIndexB == particleIndex)
                    {
                        neighbourIterator++;
                        continue;
                    }
                    
                    Particle neighbour = _Particles[particleIndexB];
                    float dist = distance(_Particles[particleIndex].predictedPosition, _Particles[particleIndexB].predictedPosition);

                    if (0.001f < dist && dist < _Radius * 2.0f)
                    {
                        float Scorr = -0.01 * pow(Poly6Kernel(dist) / Poly6Kernel(0.003*_Radius), 4);
                        float left = _Particles[particleIndex].lambda + _Particles[particleIndexB].lambda +Scorr;
						float3 right = SpikyKernelGradient(dist, _Particles[particleIndex].predictedPosition - _Particles[particleIndexB].predictedPosition);

                        positionDelta += left * right / _RestDensity;//left * right / _RestDensity;
                        if (particleIndex == _ChosenParticle)
                        {
                            //Set to color red.
                            //_Particles[particleIndex].debugVector = float3(1, 0, 0);
                            //_Particles[particleIndexB].debugVector = float3(0, 1, 0);
                        }
                    }
                    neighbourIterator++;
                }
            }
        }
    }
    //Correct position
	
    //_Particles[id.x].pressure = sum.x;
    //vel = vel * (positionDelta - _Particles[particleIndex].position) / _TimeStep;
    //vel = min(vel, float3(9999, 9999, 9999));
    _Particles[particleIndex].positionDelta = positionDelta;
	//a_Particles[particleIndex].curl = curl;
	//_Particles[particleIndex].velocity = vel;
    //_Particles[id.x].debugVector = sum;
}


//Based on the following paper: https://matthias-research.github.io/pages/publications/sca03.pdf
// Particle-Based Fluid Simulation for Interactive Applications
[numthreads(64, 1, 1)]
void UpdateParticles(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= _NumOfParticles)
    {
        return;
    }
    
    _MeshObjects.GetDimensions(numOfStructs, sizeOfStrides);
    
    float3 positionDelta = _Particles[id.x].positionDelta + _Particles[id.x].predictedPosition;
    float3 boxSize = _BoxSize;
    float3 topRight = boxSize / 2;
    float3 bottomLeft = -boxSize / 2;

    if (positionDelta.x - _SizeOfParticle < bottomLeft.x)
    {
        positionDelta.x = bottomLeft.x + _SizeOfParticle;
    }
    if (positionDelta.y - _SizeOfParticle < bottomLeft.y)
    {
        positionDelta.y = bottomLeft.y + _SizeOfParticle;
    }
    if (positionDelta.z - _SizeOfParticle < bottomLeft.z)
    {
        positionDelta.z = bottomLeft.z + _SizeOfParticle;
    }


    //Max Boundary Enforcements
    if (positionDelta.x + _SizeOfParticle > topRight.x)
    {
        positionDelta.x = topRight.x - _SizeOfParticle;
    }
    if (positionDelta.y + _SizeOfParticle > topRight.y)
    {
        positionDelta.y = topRight.y - _SizeOfParticle;
    }
    if (positionDelta.z + _SizeOfParticle > topRight.z)
    {
        positionDelta.z = topRight.z - _SizeOfParticle;
    }

    _Particles[id.x].predictedPosition = positionDelta;
}

[numthreads(64, 1, 1)]
void CalculateCurl(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= _NumOfParticles)
    {
        return;
    }

    int numOfParticles = _NumOfParticles;
    uint particleIndex = _ParticleIndices[id.x];
    int3 cellIndex = GetCell(_Particles[particleIndex].predictedPosition);
    float3 curl = 0;
    
    for (int i = -2; i <= 2; ++i)
    {
        for (int j = -2; j <= 2; ++j)
        {
            for (int k = -2; k <= 2; ++k)
            {
                int3 neighbourIndex = cellIndex + int3(i, j, k);
                uint hashedNeighborIndex = HashCell(neighbourIndex);
                uint neighbourIterator = _ParticleCellOffsets[hashedNeighborIndex];

                while (neighbourIterator != 99999999 && neighbourIterator < _NumOfParticles)
                {
                    uint particleIndexB = _ParticleIndices[neighbourIterator];

                    if (_ParticleCellIndices[particleIndexB] != hashedNeighborIndex)
                    {
                        break;
                    }

                    if (particleIndexB == particleIndex)
                    {
                        neighbourIterator++;
                        continue;
                    }

                    Particle neighbour = _Particles[particleIndexB];
                    float dist = distance(_Particles[particleIndex].predictedPosition, _Particles[particleIndexB].predictedPosition);

                    if (0.0001f < dist && dist < _Radius * 2.0f)
                    {
						float3 u = _Particles[particleIndexB].velocity - _Particles[particleIndex].velocity;
						float3 v = SpikyKernelGradient(dist, _Particles[particleIndex].predictedPosition - _Particles[particleIndexB].predictedPosition);
						float3 w = cross(u, v);
                        curl += w;
                    }
                    neighbourIterator++;
                }
            }
        }
    }
    _Particles[particleIndex].curl = curl;
}

[numthreads(64, 1, 1)]
void UpdatePositions(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= _NumOfParticles)
    {
        return;
    }
    
    _MeshObjects.GetDimensions(numOfStructs, sizeOfStrides);
    _Particles.GetDimensions(numOfParticles, sizeOfParticlesStrides);

	float3 sumVelocityVorticity = 0;
    float3 positionDelta = _Particles[id.x].predictedPosition;
    float3 velDamping = 1;

    float3 boxSize = _BoxSize;
    float3 topRight = boxSize / 2;
    float3 bottomLeft = -boxSize / 2;

    if (positionDelta.x - _SizeOfParticle < bottomLeft.x)
    {
        velDamping.x *= _BoundsDamping;
        positionDelta.x = bottomLeft.x + _SizeOfParticle;
    }
    if (positionDelta.y - _SizeOfParticle < bottomLeft.y)
    {
        velDamping.y *= _BoundsDamping;
        positionDelta.y = bottomLeft.y + _SizeOfParticle;
    }
    if (positionDelta.z - _SizeOfParticle < bottomLeft.z)
    {
        velDamping.z *= _BoundsDamping;
        positionDelta.z = bottomLeft.z + _SizeOfParticle;
    }

    //Max Boundary Enforcements
    if (positionDelta.x + _SizeOfParticle > topRight.x)
    {
        velDamping.x *= _BoundsDamping;
        positionDelta.x = topRight.x - _SizeOfParticle;
    }
    if (positionDelta.y + _SizeOfParticle > topRight.y)
    {
        velDamping.y *= _BoundsDamping;
        positionDelta.y = topRight.y - _SizeOfParticle;
    }
    if (positionDelta.z + _SizeOfParticle > topRight.z)
    {
        velDamping.z *= _BoundsDamping;
        positionDelta.z = topRight.z - _SizeOfParticle;
    }

    float2 pixel = ((id.xy + float2(0.5, 0.5)) / float2(1, 1)) * 2 - 1; //Note in HLSL this vector v - scalar is applied to each element in v.
    Ray ray = CreateCameraRay(pixel);
    Hit hit = CreateHit();

    ray.o = _Particles[id.x].lastPosition;
    ray.d = normalize(positionDelta - _Particles[id.x].lastPosition);

    CollisionTrace(ray, hit);

    if (hit.distance < abs(length(positionDelta - _Particles[id.x].lastPosition)) + _SizeOfParticle * 2)
    {
        //We hit something.
        float3 normal = hit.normal;
        positionDelta = ray.o + (ray.d * ( hit.distance- _SizeOfParticle * 2));
        velDamping = -normal * _BoundsDamping;
        //positionDelta = float3(0, 0, 0);
    }
    
    float3 vel = ((positionDelta - _Particles[id.x].lastPosition) / _TimeStep);
    
    _Particles[id.x].velocity = vel * velDamping;
	_Particles[id.x].position = positionDelta;
	_Particles[id.x].force.xyz *= _Particles[id.x].force.w;
    //_Particles[id.x].debugVector = ray.d;
}

[numthreads(64, 1, 1)]
void CalculateVorticity(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= _NumOfParticles)
    {
        return;
    }


    int numOfParticles = _NumOfParticles;
    uint particleIndex = _ParticleIndices[id.x];
    int3 cellIndex = GetCell(_Particles[particleIndex].predictedPosition);
    float3 nVisc = 0;
    float3 velocities = 0;

    for (int i = -2; i <= 2; ++i)
    {
        for (int j = -2; j <= 2; ++j)
        {
            for (int k = -2; k <= 2; ++k)
            {
                int3 neighbourIndex = cellIndex + int3(i, j, k);
                uint hashedNeighborIndex = HashCell(neighbourIndex);
                uint neighbourIterator = _ParticleCellOffsets[hashedNeighborIndex];

                while (neighbourIterator != 99999999 && neighbourIterator < _NumOfParticles)
                {
                    uint particleIndexB = _ParticleIndices[neighbourIterator];

                    if (_ParticleCellIndices[particleIndexB] != hashedNeighborIndex)
                    {
                        break;
                    }

                    if (particleIndexB == particleIndex)
                    {
                        neighbourIterator++;
                        continue;
                    }

                    Particle neighbour = _Particles[particleIndexB];
                    float dist = distance(_Particles[particleIndex].predictedPosition, _Particles[particleIndexB].predictedPosition);

                    if (0.001f < dist && dist < _Radius * 2.0f)
                    {
                        float3 vij = _Particles[particleIndexB].velocity - _Particles[particleIndex].velocity;
                        //sumVelocityVorticity
                        nVisc += length(_Particles[particleIndexB].curl) * SpikyKernelGradient(dist, _Particles[particleIndex].predictedPosition - _Particles[particleIndexB].predictedPosition);

                        velocities += vij * Poly6Kernel(dist);
                    }
                    neighbourIterator++;
                }
            }
        }
    }

    float3 n_hat = 0;
    if (dot(nVisc, nVisc) > epsilon)
    {
        n_hat = (nVisc / length(nVisc));// *_Viscosity;
    }

    float3 f_vc = _Viscosity * cross(n_hat, _Particles[particleIndex].curl);
    float3 c = 0.001;
    
    _Particles[particleIndex].velocity += c * velocities + f_vc * _TimeStep;
}

[numthreads(256, 1, 1)]
void HashParticles(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= _MaxNumOfParticles)
    {
        return;
    }
    
    //_Particles[id.x].debugVector = 0.25;
    _ParticleCellOffsets[id.x] = 99999999;
	_ParticleCellIndices[id.x] = _MaxNumOfParticles -1;
    _ParticleIndices[id.x] = id.x;
    _ParticleCount[id.x] = 0;
    
    uint particleIndex = _ParticleIndices[id.x];
    
    if(id.x < _NumOfParticles)
        _ParticleCellIndices[particleIndex] = HashCell(GetCell(_Particles[particleIndex].predictedPosition));
    uint cellIndex = _ParticleCellIndices[particleIndex];
    
    InterlockedAdd(_ParticleCount[cellIndex], 1);

	_Particles[particleIndex].cellID = HashCell(GetCell(_Particles[particleIndex].predictedPosition));
    
}

[numthreads(256, 1, 1)]
void PrefixSum(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= _NumOfParticles)
    {
        return;
    }
    
	for (int i = 1; i < _NumOfParticles; i++)
	{
		//_ParticleCount[i] += _ParticleCount[i - 1];
	}
}

[numthreads(256, 1, 1)]
void BitonicSort(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= _MaxNumOfParticles)
    {
        return;
    }
    
    uint index = _ParticleCellIndices[id.x];
    uint i = id.x + id.y * 256 * 1024;
    uint j = i ^ biBlock;
    
	if (j < i || i >= _MaxNumOfParticles)
		return;

    uint key_i = _ParticleIndices[i];
	uint key_j = _ParticleIndices[j];
	float value_i = _ParticleCellIndices[key_i];
	float value_j = _ParticleCellIndices[key_j];
    
	float diff = (value_i - value_j) * ((i & biDim) == 0 ? 1 : -1);
    if (diff > 0)
    {
		_ParticleIndices[i] = key_j;
		_ParticleIndices[j] = key_i;
    }
}

[numthreads(256, 1, 1)]
void CalculateCellOffsets(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= _NumOfParticles)
    {
        return;
    }
    
	uint particleIndex = _ParticleIndices[id.x];
	uint cellIndex = _ParticleCellIndices[particleIndex];

	//Sets this value at the index cellIndex. However it waits for all threads and ensures this is the minimum value at that index.
	InterlockedMin(_ParticleCellOffsets[cellIndex], id.x);
}