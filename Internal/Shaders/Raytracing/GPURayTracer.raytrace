#include "HLSLSupport.cginc"
#include "UnityRaytracingMeshUtils.cginc"
#include "UnityShaderVariables.cginc"

RWTexture2D<float4> _RayTracedImage;
float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;

RaytracingAccelerationStructure _RaytracingAccelerationStructure : register(t0);

#pragma max_recursion_depth 1

struct Payload
{
	float4 color;
};

[shader("raygeneration")]
void MyRaygenShader()
{
    uint3 id = DispatchRaysIndex();
    uint3 dim = DispatchRaysDimensions();

    //Convert to 0 - 1.
    //float2 texcoord = (dispatchId.xy + float2(0.5, 0.5)) / float2(dispatchDim.x, dispatchDim.y);
    float2 pixel = ((id.xy + float2(0.5, 0.5)) / float2(dim.x, dim.y)) * 2 - 1;
    
    //Convert to camera space.
    float4 viewPos = mul(_CameraInverseProjection, float4(pixel.x, pixel.y, 1, 1));
    //Perspective divide.
    viewPos /= viewPos.w;
    
    //Convert to world space.
    float3 worldPos = mul(_CameraToWorld, viewPos).xyz;
    float3 worldDirection = normalize(worldPos - _WorldSpaceCameraPos);

    //Creating RayDesc.
    RayDesc ray;
    ray.Origin = _WorldSpaceCameraPos; 
    ray.Direction = worldDirection; 
    ray.TMin = 0;
    ray.TMax = 10000;

    Payload payload;
    payload.color = float4(0, 0, 0, 0);


    TraceRay(_RaytracingAccelerationStructure, RAY_FLAG_NONE, 0xFF, 0, 1, 0, ray, payload);

    _RayTracedImage[id.xy] = payload.color;
    
}

[shader("miss")]
void MyMissShader(inout Payload payload : SV_RayPayload)
{
    payload.color = 0;
}