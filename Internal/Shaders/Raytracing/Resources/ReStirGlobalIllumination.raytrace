#include "HLSLSupport.cginc"
#include "UnityRaytracingMeshUtils.cginc"
#include "UnityShaderVariables.cginc"
#include "../../RayTraceHelpersUnigma.hlsl"
#include "UnityCG.cginc"


RWTexture2D<float4> _UnigmaGlobalIllumination;

RWStructuredBuffer<UnigmaLight> _unigmaLights;
RWStructuredBuffer<Sample> _samples;
RWStructuredBuffer<Reservoir> _reservoirs;
RWStructuredBuffer<ReservoirPath> _reservoirPaths;
RWStructuredBuffer<UnigmaDispatchInfo> _UnigmaDispatchInfo;
Texture2D<float4> _CameraMotionVectorsTextureReSTIR;

int _UnigmaFrameCount;
int _NumberOfLights;
int _TemporalReservoirsCount;
int _PassCount;

RaytracingAccelerationStructure _RaytracingAccelerationStructure;
#pragma max_recursion_depth 1

void InitializeRay(inout float3 orig, inout float3 dir)
{

}

void InitializeReservoir(inout Reservoir reservoir)
{
    reservoir.W = 0;
    reservoir.Y = 0;
    reservoir.pHat = 0;
    reservoir.M = 0;
    reservoir.wSum = 0;
    reservoir.x1 = 0;
    reservoir.age = 0;
}

bool addReservoirSample(inout Reservoir reservoir, uint lightX, float weight, float c, float2 randSeed)
{
    reservoir.M += c;
    reservoir.wSum += weight;

    if(rand(randSeed) < weight / reservoir.wSum)
    {
        reservoir.Y = lightX;
        return true;
    }

    return false;
}

float3 ComputeBRDF(inout Payload payload, in RayDesc ray, int bounce)
{
    float3 BRDF = 0;
    float bounceStrength = (1.0 / ((float)2*bounce+1.0f));

    float3 emittance = payload.color.xyz * payload.color.w *bounceStrength*0.1;

    float cos_theta = sdot(payload.direction, payload.normal);

    //BRDF(x) * Le(x) * G(x);
    BRDF = emittance * cos_theta*payload.color.xyz * (1.0/RUNITY_PI) / (1.0/(2*RUNITY_PI));
   
    return BRDF;
}

float4 areaSampleLights(inout Payload payload, inout RayDesc ray, inout Reservoir reservoir)
{
    //Initialize the payload and bounces.
    payload.color = float4(1,1,1,0);
    payload.distance = 99999;
    payload.direction = ray.Direction;
    payload.pixel += _Time.xy;

    
    float3 cachedPos = 0;
    float4 cachedColor = payload.color;

    float3 lightPosition = _unigmaLights[reservoir.Y].position;
    float3 BRDF = 0;

    //V(x1 <-> x2). Changing the distance from the hit point leads to interesting results.
    TraceRay(_RaytracingAccelerationStructure, RAY_FLAG_NONE, 0xFF, 0, 1, 0, ray, payload);
    BRDF = ComputeBRDF(payload, ray, 0);

    ray.Direction = normalize(lightPosition - ray.Origin);
    TraceRay(_RaytracingAccelerationStructure, RAY_FLAG_NONE, 0xFF, 0, 1, 0, ray, payload);
    BRDF *= step(0.001, payload.color.w);

    return float4(BRDF, 1.0);
}

float4 ShadePixel(inout Payload payload, inout RayDesc ray)
{
    float lightStrengthCostant = 0.1;
    payload.pixel += _Time.xy;
    //Hit the first object.
    TraceRay(_RaytracingAccelerationStructure, RAY_FLAG_NONE, 0xFF, 0, 1, 0, ray, payload);
    float distanceFromPoint = 0.01;
    float3 materialColor = payload.color;
    float3 materialNormal = payload.direction;

    ray.Origin = ray.Origin + ray.Direction * (payload.distance - distanceFromPoint);
    ray.Direction = payload.direction;

    float3 materialPosition = ray.Origin;

    float3 BRDF = ComputeBRDF(payload, ray, 0);

    Reservoir temporalReservoir;
    InitializeReservoir(temporalReservoir);

    uint3 id = DispatchRaysIndex();
    uint3 dim = DispatchRaysDimensions();

    float4 pixelColor = 0;
    float pdf = 1.0 / (float)_NumberOfLights;
    float pHat = 0;

    float3 cachedPosition = ray.Origin;
    float3 cachedDirection = ray.Direction;


    //Algorithm 3, initial candidates
    for(uint i = 0; i < _NumberOfLights; i++)
    {
        float2 randSeed = payload.pixel + _Time.xy + float2(i, i*i+i);
        uint lightIndex = uint(rand(randSeed) * (_NumberOfLights));

        float3 lightPosition = _unigmaLights[lightIndex].position;

        float3 toLight = normalize(lightPosition - ray.Origin);
        
        float cosTheta = sdot(payload.direction, toLight);
        pHat = length(payload.color.xyz / RUNITY_PI *  (_unigmaLights[lightIndex].emission*lightStrengthCostant)*cosTheta);
       
        float weight = pHat;// / pdf;
        addReservoirSample(temporalReservoir, lightIndex, weight, 1, randSeed);
    }




    
    //Evaluate visibility for initial candidates
    uint lightIndex = temporalReservoir.Y;

    float3 lightPosition = _unigmaLights[lightIndex].position;

    float3 toLight = normalize(lightPosition - materialPosition);
        
    float cosTheta = sdot(payload.direction, toLight);



    
    ray.Direction = toLight;
    ray.Origin = materialPosition;
    TraceRay(_RaytracingAccelerationStructure, RAY_FLAG_NONE, 0xFF, 0, 1, 0, ray, payload);
    float visible = step(0.0001, payload.color.w);

    if(visible < 0.001)
    {
        temporalReservoir.W = 0;
    }

 
    //Temporal reuse.
    //Add current sample.
    float2 randSeedR2 = payload.pixel + _Time.xy + float2(rand(payload.pixel + id.xy), rand(payload.pixel + dim.xy));
    float weightR2 =  pHat * temporalReservoir.W * temporalReservoir.M;
    
    pHat = length(payload.color.xyz / RUNITY_PI *  (_unigmaLights[lightIndex].emission*lightStrengthCostant)*cosTheta);

    temporalReservoir.W = pHat > 0.0 ? (temporalReservoir.wSum / temporalReservoir.M) / pHat : 0.0;
    addReservoirSample(temporalReservoir, temporalReservoir.Y, weightR2, 0, randSeedR2);
    
    //Add previous samples.
    for(int i = 0; i < _TemporalReservoirsCount; i++)
    {
        int currentIndex =  id.x + id.y*dim.x + i*dim.x*dim.y;

        Reservoir previousReservoir = _reservoirs[currentIndex];
        previousReservoir.M = min(8 * temporalReservoir.M, previousReservoir.M);

        lightIndex = previousReservoir.Y;

        lightPosition = _unigmaLights[lightIndex].position;

        toLight = normalize(lightPosition - materialPosition);
        
        cosTheta = sdot(materialNormal, toLight);

        pHat = length(materialColor / RUNITY_PI *  (_unigmaLights[lightIndex].emission*lightStrengthCostant)*cosTheta);

        float randSeedR = payload.pixel + _Time.xy + float2(i, i*i*i);
        float weightR =  pHat * previousReservoir.W * previousReservoir.M;
        addReservoirSample(temporalReservoir, previousReservoir.Y, weightR, previousReservoir.M, randSeedR);
    }
    

    lightIndex = temporalReservoir.Y;

    lightPosition = _unigmaLights[lightIndex].position;

    toLight = normalize(lightPosition - materialPosition);
        
    cosTheta = sdot(materialNormal, toLight);

    pHat = length(materialColor / RUNITY_PI *  (_unigmaLights[lightIndex].emission*lightStrengthCostant)*cosTheta);
    temporalReservoir.W = pHat > 0.0 ? (temporalReservoir.wSum / temporalReservoir.M) / pHat : 0.0;

    int currentReservoirTemporal = _UnigmaFrameCount % _TemporalReservoirsCount;
    int reservoirIndex = id.x + id.y*dim.x + currentReservoirTemporal*dim.x*dim.y;
    _reservoirs[reservoirIndex] = temporalReservoir;


    //Global illumination.




    //Spatial reuse
    int _NumberOfNeighbors = 15;
    int _NeighborsRadius = 5;

    for(int i = 0; i < _NumberOfNeighbors; i++)
    {
        float2 neighborIndex = 0;
        float2 randSeed = payload.pixel + _Time.xy + float2(i, i*i*i);
        neighborIndex.x = int(rand(randSeed) * _NeighborsRadius * 2.f) - _NeighborsRadius;
		neighborIndex.y = int(rand(randSeed+1) * _NeighborsRadius * 2.f) - _NeighborsRadius;

		neighborIndex.x = max(0, min(dim.x - 1, id.x + neighborIndex.x));
		neighborIndex.y = max(0, min(dim.y - 1, id.y + neighborIndex.y));

        int currentReservoirTemporal = _UnigmaFrameCount % _TemporalReservoirsCount;
        int reservoirIndex = neighborIndex.x + neighborIndex.y*dim.x + currentReservoirTemporal*dim.x*dim.y;

        Reservoir neighborReservoir = _reservoirs[reservoirIndex];

        lightIndex = neighborReservoir.Y;

        lightPosition = _unigmaLights[lightIndex].position;

        toLight = normalize(lightPosition - materialPosition);
        
        cosTheta = sdot(materialNormal, toLight);

        pHat = length(materialColor / RUNITY_PI *  (_unigmaLights[lightIndex].emission*lightStrengthCostant)*cosTheta);
        float weightR =  pHat * neighborReservoir.W * neighborReservoir.M;
        addReservoirSample(temporalReservoir, neighborReservoir.Y, weightR, neighborReservoir.M, randSeed);
    }


    //pixelColor = areaSampleLights(payload, ray, temporalReservoir) + float4(BRDF, 1);
    lightIndex = temporalReservoir.Y;

    lightPosition = _unigmaLights[lightIndex].position;

    toLight = normalize(lightPosition - materialPosition);
        
    cosTheta = sdot(materialNormal, toLight);

    pHat = length(materialColor / RUNITY_PI *  (_unigmaLights[lightIndex].emission*lightStrengthCostant)*cosTheta);
    temporalReservoir.W = pHat > 0.0 ? (temporalReservoir.wSum / temporalReservoir.M) / pHat : 0.0;
    temporalReservoir.pHat = pHat;
    

    float4 weightFinal = temporalReservoir.W;

    //Set this reservoir as a past frame.


    
    return (float4(materialColor, 1)*weightFinal*pHat + float4(BRDF, 1));

}

void CreateSample(inout RayDesc ray, inout Payload payload, float3 chosenCameraPosition, float3 chosenDirection)
{
    uint3 id = DispatchRaysIndex();
    uint3 dim = DispatchRaysDimensions();

    //Convert to 0 - 1.
    float2 pixel = ((id.xy + float2(0.5, 0.5)) / float2(dim.x, dim.y)) * 2 - 1;

    ray.Origin = chosenCameraPosition; 
    ray.Direction = chosenDirection; 
    ray.TMin = 0;
    ray.TMax = 10000;

    payload.color = float4(1,1,1,0);
    payload.distance = 99999;
    payload.direction = chosenDirection;
    payload.pixel = pixel + _Time.xy + _UnigmaFrameCount;
}

float4 AreaLightSample(float2 seedIn, UnigmaLight lightSource)
{
    float2 pixel = seedIn;
    float2 seed = _Time.xy + seedIn;

    float2 xy = randGaussian(float3(pixel + seed, seed.y), rand(seed.x));
	float2 xz = randGaussian(float3(pixel + seed + 2452, seed.x), rand(seed.y));
	float3 uv = float3(xy, xz.x);

    float3 area = lightSource.area;

    float4 lightSample = 1.0;
    lightSample.xyz = (uv * area) + lightSource.position;
    lightSample.w = lightSource.emission;

    return lightSample;
}

float GetTargetFunction(inout Reservoir reservoir, float3 origin, in Payload Sx1Payload, float2 seed)
{
    
    uint lightIndex = reservoir.Y; //This new light index comes from the weighted reservoir we computed.
    float4 lightSample = AreaLightSample(seed, _unigmaLights[lightIndex]);
    float3 toLight = normalize(lightSample.xyz - origin);
    //Finally compute the brdf for this light.
    float Gx = min(50000, 1.0f / (distance(lightSample.xyz, origin)));
    float Le = _unigmaLights[lightIndex].emission;
    float BRDF = (1.0f / RUNITY_PI) * sdot(Sx1Payload.normal, toLight);

    //Target function.
    float4 pHat = BRDF * Le * Gx;

    return pHat;
}

float UpdateReservoirWeight(inout Reservoir reservoir, float3 origin, in Payload Sx1Payload, float2 seed)
{
    
    uint lightIndex = reservoir.Y; //This new light index comes from the weighted reservoir we computed.
    float4 lightSample = AreaLightSample(seed, _unigmaLights[lightIndex]);
    float3 toLight = normalize(lightSample.xyz - origin);
    //Finally compute the brdf for this light.
    float Gx = min(50000, 1.0f / (distance(lightSample.xyz, origin)));
    float Le = _unigmaLights[lightIndex].emission;
    float BRDF = (1.0f / RUNITY_PI) * sdot(Sx1Payload.normal, toLight);

    //Target function.
    float4 pHat = BRDF * Le * Gx;

    reservoir.W = pHat > 0.0 ? (reservoir.wSum / reservoir.M) / pHat : 0.0;
    reservoir.pHat = pHat;

    return pHat;
}

//Just a basic unbiased direct lighter for one light.
float4 ShadePixelRestirDI(inout Payload payload, inout RayDesc ray)
{

    //----------------Generate Sample paths X0 and X1 ------------------//
    //distance from the hit point.
    float distanceFromPoint = 0.01;
    uint3 id = DispatchRaysIndex();
    uint3 dim = DispatchRaysDimensions();
    float2 UV = ((id.xy + float2(0.5, 0.5)) / float2(dim.x, dim.y)) * 2 - 1;
    float2 motionVector = _CameraMotionVectorsTextureReSTIR[id.xy];
    float2 prevUV = UV - motionVector;
    float2 invPrevUV = UV + motionVector;

        
    //if(_PassCount > 0)
    //    prevUV = UV;

    //Inverse previous UV back to id.xy.

    float2 previousFrameIndex = ((prevUV*dim.xy + dim.xy) / 2) - 0.5f;

    float2 randSeed = payload.pixel+_Time.xy + float2(rand(_Time.x*_PassCount+_Time.x), rand(_Time.y+_PassCount));
    int currentReservoirTemporal = 0;//_UnigmaFrameCount % _TemporalReservoirsCount;
    int reservoirIndex = previousFrameIndex.x + previousFrameIndex.y*dim.x; //id.x + id.y*dim.x + currentReservoirTemporal*dim.x*dim.y;

    int storageReservoirTemporal =  1;//(_UnigmaFrameCount+1) % _TemporalReservoirsCount;
    int storageReservoirIndex = id.x + id.y*dim.x + storageReservoirTemporal*dim.x*dim.y;
    int MHistoryLength = 25;


    //Hit the first object. This is sample x0. Starts from the pixel plane, shoots direction of camera and perspective.
    RayDesc Sx0Ray;
    Payload Sx0Payload;
    CreateSample(Sx0Ray, Sx0Payload,  ray.Origin, ray.Direction);

    //Next we set x1 this is our object that was hit.
    RayDesc Sx1Ray;
    Payload Sx1Payload;
    //initialize sample.
    CreateSample(Sx1Ray, Sx1Payload,  Sx0Ray.Origin, Sx0Ray.Direction);
    TraceRay(_RaytracingAccelerationStructure, RAY_FLAG_NONE, 0xFF, 0, 1, 0, Sx1Ray, Sx1Payload);


    float3 x2Origin = Sx1Ray.Origin + (Sx1Ray.Direction * Sx1Payload.distance) + (Sx1Payload.normal * distanceFromPoint);
    //----------------Begin Restir by holding X0, X1 as constants and perform integration for X2------------------//
    
    //Initalizing the current reservoir we will use.
    Reservoir currentReservoir;
    InitializeReservoir(currentReservoir);

    //----------------------------------
    //------------------------------------RIS ALGORITHM------------------------------//

    //Algorithm 3, initial light candidates
    //Firstly M is the number of samples we want.
    uint MareaSamples = 32;
    for(uint i = 0; i < min(_NumberOfLights, MareaSamples); i++)
    {
        //TODO: Better random.
        float2 randSeed = payload.pixel + _Time.xy + float2(i,i);
        float numLights = (float)_NumberOfLights;
        uint lightIndex = rand(randSeed)*numLights;//uint(ceil(rand(randSeed*randSeed + rand(randSeed)) * (numLights-1))); //randomly get a light to sample from.
        //Sample the area light given that light index.
        float4 lightSample = AreaLightSample(randSeed, _unigmaLights[lightIndex]);

        float3 toLight = normalize(lightSample.xyz - x2Origin);

        //Create the target function to approximate it.
        float Gx = min(500, 1.0f / (distance(lightSample.xyz, x2Origin)));
        float Le = _unigmaLights[lightIndex].emission;
        float BRDF = (1.0f / RUNITY_PI) * sdot(Sx1Payload.normal, toLight);
        float pHat = BRDF * Le * Gx;

        float weight = pHat;
        
        addReservoirSample(currentReservoir, lightIndex, weight, 1, randSeed);
    }

    float4 lightSample = AreaLightSample(randSeed, _unigmaLights[currentReservoir.Y]);
    float3 x2Direction = normalize(lightSample.xyz - x2Origin);
    float currentPhat = UpdateReservoirWeight(currentReservoir, x2Origin, Sx1Payload, randSeed);
    //return (currentReservoir.wSum / currentReservoir.M) / currentPhat;
    //Now let's create Sample X2.
    RayDesc Sx2Ray;
    Payload Sx2Payload;
    CreateSample(Sx2Ray, Sx2Payload, x2Origin, x2Direction);
    TraceRay(_RaytracingAccelerationStructure, RAY_FLAG_NONE, 0xFF, 0, 1, 0, Sx2Ray, Sx2Payload);

    if(Sx2Payload.distance >= 99990)
    {
        Sx2Payload.color.w = 1;
    }

    float visible = step(0.0001, Sx2Payload.color.w);
    if(visible < 0.001)
    {
        currentReservoir.W = 0;
    }

    //----------------------------------
    //------------------------------------SPATIOTEMPORAL ALGORITHM------------------------------//

    //Temporal
    //Add previous samples.
    //Same pixel and also same time.
    float randSeedR = payload.pixel + _Time.xy;
    Reservoir temporalReservoir;
    Reservoir previousReservoir = _reservoirs[reservoirIndex];
    InitializeReservoir(temporalReservoir);

    /*
    previousReservoir.Y = _reservoirs[reservoirIndex].Y;
    previousReservoir.W = _reservoirs[reservoirIndex].W;
    previousReservoir.wSum = _reservoirs[reservoirIndex].wSum;
    previousReservoir.M = _reservoirs[reservoirIndex].M;
    previousReservoir.pHat = _reservoirs[reservoirIndex].pHat;
    previousReservoir.x1 = _reservoirs[reservoirIndex].x1;
    */


    //Combine current reservoir.
    addReservoirSample(temporalReservoir, currentReservoir.Y, currentReservoir.pHat * currentReservoir.W * currentReservoir.M, 1, randSeedR);


    if(distance(prevUV, UV) > 0.00001 || distance(x2Origin, previousReservoir.x1) > 0.001 || (abs(previousReservoir.pHat - currentPhat) / currentPhat) > 0.2)
    {
        //previousReservoir.age = 0;
        previousReservoir.M = 0;
    }
            
    //Combine previous reservoir.
    previousReservoir.M = min(MHistoryLength * currentReservoir.M, previousReservoir.M); //History length.

    uint prevLightIndex = previousReservoir.Y;
    float4 prevLightSample = AreaLightSample(randSeedR, _unigmaLights[prevLightIndex]);

    float3 prevToLight = normalize(prevLightSample.xyz - previousReservoir.x1);

    //float pHat = GetTargetFunction(previousReservoir, previousReservoir.x1, Sx1Payload, randSeedR);

    float weight = previousReservoir.pHat *previousReservoir.W*previousReservoir.M;

    addReservoirSample(temporalReservoir, previousReservoir.Y, weight, previousReservoir.M, randSeedR);

    //Add this reservoir to final sample.
    UpdateReservoirWeight(temporalReservoir, x2Origin, Sx1Payload, randSeed);
    currentReservoir = temporalReservoir;
    currentReservoir.age += previousReservoir.age;

    currentReservoir.x1 = x2Origin;
    _reservoirs[storageReservoirIndex] = currentReservoir;
        /*
    //Spatial reuse.
    Reservoir spatialReservoir;
    InitializeReservoir(spatialReservoir);
    int _NumberOfNeighbors = 15;
    int _NeighborsRadius = 5;

    for(int i = 0; i < _NumberOfNeighbors; i++)
    {
        //Sample neighbors in a grid fashion to get index of what neighbor to sample from.
        float2 neighborIndex = 0;
        float2 randSeed = payload.pixel + _Time.xy + float2(i, i*i*i);
        neighborIndex.x = int(rand(randSeed) * _NeighborsRadius * 2.f) - _NeighborsRadius;
		neighborIndex.y = int(rand(randSeed+1) * _NeighborsRadius * 2.f) - _NeighborsRadius;
		neighborIndex.x = max(0, min(dim.x - 1, id.x + neighborIndex.x));
		neighborIndex.y = max(0, min(dim.y - 1, id.y + neighborIndex.y));

        //Get the reservoir of neighboring pixels.
        int currentReservoirTemporal = _UnigmaFrameCount % _TemporalReservoirsCount;
        int reservoirIndex = neighborIndex.x + neighborIndex.y*dim.x + currentReservoirTemporal*dim.x*dim.y;
        Reservoir neighborReservoir = _reservoirs[reservoirIndex];

        //Begin using spatial neighbors to update the weights.
        //Check if valid sample.
        bool reservoirValid = (neighborReservoir.M > 0) && (neighborReservoir.W > 0);
        if(reservoirValid)
        {
            uint neighborLightIndex = neighborReservoir.Y;
            float4 neighborLightSample = AreaLightSample(randSeed, _unigmaLights[neighborLightIndex]);
            float3 neighborToLight = normalize(neighborLightSample.xyz - neighborReservoir.x1);
            float pHat = GetTargetFunction(neighborReservoir, neighborReservoir.x1, Sx1Payload, randSeed);
            addReservoirSample(spatialReservoir, neighborReservoir.Y, pHat * neighborReservoir.W * neighborReservoir.M, neighborReservoir.M, randSeed);
        }
    }

    float spatialPDF = UpdateReservoirWeight(spatialReservoir, x2Origin, Sx1Payload, randSeed);

    //Combine with spatial Reservoir
    addReservoirSample(currentReservoir, spatialReservoir.Y, spatialPDF * spatialReservoir.W * spatialReservoir.M, spatialReservoir.M, randSeed);
    //----------------------------------
    //------------------------------------FINAL GATHER------------------------------//

    //Now that we have stored our reservoirs we look for the current light to sample.
    uint lightIndex = currentReservoir.Y; //This new light index comes from the weighted reservoir we computed.

    float pHat = GetTargetFunction(currentReservoir, x2Origin, Sx1Payload, randSeed);

    float4 weightFinal = currentReservoir.W;


    return pHat*weightFinal*Sx1Payload.color;
    */
    return Sx1Payload.color.w * Sx1Payload.color;
}

float GetTargetPathRadiance(inout Reservoir reservoir, float3 origin, float3 normal, float2 seed)
{

    uint lightIndex = reservoir.Y; //This new light index comes from the weighted reservoir we computed.
    float4 lightSample = AreaLightSample(seed, _unigmaLights[lightIndex]);
    float3 toLight = normalize(lightSample.xyz - origin);
    //Finally compute the brdf for this light.
    float Gx = min(50000, 1.0f / (distance(lightSample.xyz, origin)));
    float Le = _unigmaLights[lightIndex].emission;
    float BRDF = (1.0f / RUNITY_PI) * sdot(normal, toLight);

    //Target function.
    float4 pHat = BRDF * Le * Gx;

    return pHat;
}

float4 SampleIndirect(inout Payload payload, inout RayDesc ray)
{
    //distance from the hit point.
    float distanceFromPoint = 0.1;
    uint3 id = DispatchRaysIndex();
    uint3 dim = DispatchRaysDimensions();
    float2 UV = ((id.xy + float2(0.5, 0.5)) / float2(dim.x, dim.y)) * 2 - 1;
    float2 motionVector = _CameraMotionVectorsTextureReSTIR[id.xy];
    float2 prevUV = UV - motionVector;
    float2 invPrevUV = UV + motionVector;
    int MHistoryLength = 25;
        
    //if(_PassCount > 0)
    //    prevUV = UV;

    //Inverse previous UV back to id.xy.

    float2 previousFrameIndex = ((prevUV*dim.xy + dim.xy) / 2) - 0.5f;

    int currentReservoirTemporal = 0;//_UnigmaFrameCount % _TemporalReservoirsCount;
    int reservoirIndex = previousFrameIndex.x + previousFrameIndex.y*dim.x; //id.x + id.y*dim.x + currentReservoirTemporal*dim.x*dim.y;

    int storageReservoirTemporal =  1;//(_UnigmaFrameCount+1) % _TemporalReservoirsCount;
    int storageReservoirIndex = id.x + id.y*dim.x + storageReservoirTemporal*dim.x*dim.y;
    float2 randSeed = payload.pixel+_Time.xy + float2(rand(_Time.x*_PassCount+_Time.x), rand(_Time.y+_PassCount));

    //Hit the first object. This is sample x0. Starts from the pixel plane, shoots direction of camera and perspective.
    RayDesc Sx0Ray;
    Payload Sx0Payload;
    CreateSample(Sx0Ray, Sx0Payload,  ray.Origin, ray.Direction);

    //Next we set x1 this is our object that was hit.
    RayDesc Sx1Ray;
    Payload Sx1Payload;
    //initialize sample.
    CreateSample(Sx1Ray, Sx1Payload,  Sx0Ray.Origin, Sx0Ray.Direction);
    TraceRay(_RaytracingAccelerationStructure, RAY_FLAG_NONE, 0xFF, 0, 1, 0, Sx1Ray, Sx1Payload);

    //Getting that hit point location. Will be the origin of x2 path.
    float3 x2Origin = Sx1Ray.Origin + (Sx1Ray.Direction * Sx1Payload.distance) + (Sx1Payload.normal * distanceFromPoint);

    //Direction from BSDF... this comes from the shader.
    float3 x2Direction = Sx1Payload.direction;
    
    //Now make x2 sample, this goes and hits surface from the first bounce.
    RayDesc Sx2Ray;
    Payload Sx2Payload;
    CreateSample(Sx2Ray, Sx2Payload,  x2Origin, x2Direction); //From hit point to pdf direction.
    TraceRay(_RaytracingAccelerationStructure, RAY_FLAG_NONE, 0xFF, 0, 1, 0, Sx2Ray, Sx2Payload);

    //Now start at the new surface hit from the BSDF bounce. This is our reservoirGI.
    float3 xNOrigin = Sx2Ray.Origin + (Sx2Ray.Direction * Sx2Payload.distance) + (Sx2Payload.normal * distanceFromPoint);
    float3 xNDirection = Sx2Payload.direction;
    
    //return Sx2Payload.color;
    int maxBounces = 0;
    float radianceIndirect = Sx2Payload.color.w;
    RayDesc SxNRay;
    Payload SxNPayload;
    CreateSample(SxNRay, SxNPayload,  xNOrigin, xNDirection); //Start at that new surface from bounce...
    SxNPayload.normal = Sx2Payload.normal;
    SxNPayload.color = Sx2Payload.color;
    for(int i = 0; i < maxBounces; i++)
    {
        TraceRay(_RaytracingAccelerationStructure, RAY_FLAG_NONE, 0xFF, 0, 1, 0, SxNRay, SxNPayload);
        xNOrigin = SxNRay.Origin + (SxNRay.Direction * SxNPayload.distance) + (SxNPayload.normal * distanceFromPoint);
        xNDirection = SxNPayload.direction;
        radianceIndirect += SxNPayload.color.w;
        SxNRay.Origin = xNOrigin;
        SxNRay.Direction = xNDirection;
        //CreateSample(SxNRay, SxNPayload,  xNOrigin, xNDirection); //Start at that new surface from bounce...
    }

    //----------------------------------
    //------------------------------------ALGORITHM 2 Initial Sampling------------------------------//

    //Create a surface based on secondary surface.
    Surface Ssurface;
    CreateSurface(Ssurface, x2Origin, Sx1Payload.normal, normalize(x2Origin - Sx0Ray.Origin), Sx1Payload.color.xyz, Sx1Payload.color.w);
    
    ReservoirPath currentReservoirPath;
    InitiateReservoirPath(currentReservoirPath, xNOrigin, SxNPayload.normal.xyz, Sx2Payload.color.w); 
    
    float3 outgoingRadiance = GetTargetFunctionSurface(Ssurface, currentReservoirPath.position, currentReservoirPath.radiance);

    InitiateReservoirPath(currentReservoirPath, xNOrigin, SxNPayload.normal.xyz, outgoingRadiance);
    
    
    //return float4(outgoingRadiance, 1);
    //----------------------------------
    //------------------------------------ALGORITHM Temporal Sampling------------------------------//
    float Minitial = currentReservoirPath.M;
    ReservoirPath prevReservoirPath = _reservoirPaths[reservoirIndex];

    Surface temporalSurface;
    //(inout Surface surface, float3 position, float3 normal, float3 viewDir, float3 color, float emittance)
    CreateSurface(temporalSurface, prevReservoirPath.position, prevReservoirPath.normal, normalize(prevReservoirPath.position - x2Origin), prevReservoirPath.radiance.xyz, prevReservoirPath.radiance.r);

    prevReservoirPath.M = min(MHistoryLength * currentReservoirPath.M, prevReservoirPath.M); //History length.

    float3 prevOutgoingRadiance = GetTargetFunctionSurface(Ssurface, prevReservoirPath.position, prevReservoirPath.radiance);

    
     //combine temporal...
    if(distance(prevUV, UV) > 0.00001)
    {
        //previousReservoir.age = 0;
        prevReservoirPath.M = 0;
    }
    bool isSelected = addReservoirSamplePath(currentReservoirPath, prevReservoirPath, prevOutgoingRadiance, prevReservoirPath.M, randSeed);

    float selectedPdf = outgoingRadiance;
    if(isSelected)
        selectedPdf = prevOutgoingRadiance;

    float pi = selectedPdf;
    float piSum = selectedPdf * Minitial;

    float temporalPdf = GetTargetFunctionSurface(temporalSurface, currentReservoirPath.position, currentReservoirPath.radiance);
    piSum += temporalPdf * prevReservoirPath.M;
    pi = isSelected ? temporalPdf : pi;

    float targetDenom = piSum * selectedPdf;
    float targetNumer = pi;
    float pHat = selectedPdf;
    //currentReservoirPath.wSum =  (targetNumer == 0.0) ? 0.0 : (currentReservoirPath.wSum * targetNumer) / targetDenom;
    currentReservoirPath.wSum = pHat == 0.f ? 0.f : currentReservoirPath.wSum / (currentReservoirPath.M * pHat);

    //(inout ReservoirPath reservoir, float3 position, float3 normal, float3 radiance)
    //Initalizing the current reservoir we will use.
    /*

    float targetPdf = GetTargetPathRadiance(currentReservoir, xNOrigin, xNDirection, randSeed);

    //combine temporal...
    ReservoirPath prevReservoirPath = _reservoirPaths[reservoirIndex];

    float prevTargetPdf = GetTargetPathRadiance(currentReservoir, prevReservoirPath.position, prevReservoirPath.normal, randSeed);

    if(distance(prevUV, UV) > 0.00001 || (abs(prevTargetPdf - targetPdf) / targetPdf) > 0.2)
    {
        //previousReservoir.age = 0;
        prevReservoirPath.M = 0;
    }

    bool isSelected = addReservoirSamplePath(currentReservoirPath, prevReservoirPath, prevTargetPdf, prevReservoirPath.M, randSeed);
    //addReservoirSamplePath(inout ReservoirPath reservoir, inout ReservoirPath newReservoir, float weight, float c, float2 randSeed)

    _reservoirPaths[storageReservoirIndex] = currentReservoirPath;

    float selectedPdf = targetPdf;
    if(!isSelected)
        selectedPdf = prevTargetPdf;
        */

    //Store reservoir.
    _reservoirPaths[storageReservoirIndex] = currentReservoirPath;
    
    float visibility = 1.0;
    
    RayDesc SxVRay;
    Payload SxVPayload;
    CreateSample(SxVRay, SxVPayload,  x2Origin, normalize(currentReservoirPath.position - x2Origin)); //Start at that new surface from bounce...

    
    TraceRay(_RaytracingAccelerationStructure, RAY_FLAG_NONE, 0xFF, 0, 1, 0, SxVRay, SxVPayload);
    visibility = step(0.0001, SxVPayload.color.w);
    
    return 0;//float4(visibility*currentReservoirPath.radiance * currentReservoirPath.wSum, 1);

}

//Just a basic unbiased direct lighter for one light.
float4 ShadePixelDI(inout Payload payload, inout RayDesc ray)
{
    uint lightIndex = 0;
    //distance from the hit point.
    float distanceFromPoint = 0.1;

    //Hit the first object. This is sample x0. Starts from the pixel plane, shoots direction of camera and perspective.
    RayDesc Sx0Ray;
    Payload Sx0Payload;
    CreateSample(Sx0Ray, Sx0Payload,  ray.Origin, ray.Direction);

    //Next we set x1 this is our object that was hit.
    RayDesc Sx1Ray;
    Payload Sx1Payload;
    //initialize sample.
    CreateSample(Sx1Ray, Sx1Payload,  Sx0Ray.Origin, Sx0Ray.Direction);
    TraceRay(_RaytracingAccelerationStructure, RAY_FLAG_NONE, 0xFF, 0, 1, 0, Sx1Ray, Sx1Payload);

    //Getting that hit point location. Will be the origin of x2 path.
    float3 x2Origin = Sx1Ray.Origin + (Sx1Ray.Direction * Sx1Payload.distance) + (Sx1Payload.normal * distanceFromPoint);
    //This is direct light sampling. So just path towards primary light. There is only 1 light considered in this case.
    float4 lightSample = AreaLightSample(payload.pixel+_Time.xy, _unigmaLights[lightIndex]);
    float3 toLight = normalize(lightSample.xyz - x2Origin);
    float3 x2Direction = toLight;//Sx1Payload.direction;
    
    //Now make x2 sample, initialize it.
    RayDesc Sx2Ray;
    Payload Sx2Payload;
    CreateSample(Sx2Ray, Sx2Payload,  x2Origin, x2Direction);
    TraceRay(_RaytracingAccelerationStructure, RAY_FLAG_NONE, 0xFF, 0, 1, 0, Sx2Ray, Sx2Payload);

    float3 lightHitPosition = Sx2Ray.Origin + (Sx2Ray.Direction * Sx2Payload.distance) + (Sx2Payload.normal * distanceFromPoint);


    //Finally compute the brdf for this light.
    float Gx = 1.0f / (distance(lightHitPosition, x2Origin));
    float Le = _unigmaLights[lightIndex].emission*15;
    float V = step(0.0001, Sx2Payload.color.w);
    float BRDF = (1.0f / RUNITY_PI) * sdot(Sx1Payload.normal, toLight);

    //Target function.
    float4 pHat = BRDF * Le * Gx * V;

    return pHat*Sx1Payload.color;
}

[shader("raygeneration")]
void RestirGlobalIllumantionRayGen()
{
    uint2 dispatchIdx = DispatchRaysIndex().xy;
   
    uint3 id = DispatchRaysIndex();
    uint3 dim = DispatchRaysDimensions();

    //Convert to 0 - 1.
    float2 pixel = ((id.xy + float2(0.5, 0.5)) / float2(dim.x, dim.y)) * 2 - 1;
    
    float3 chosenCameraPosition;
    float3 chosenDirection;

    float frameCount = 10;
    //if(_UnigmaFrameCount > frameCount)
    //    return;
    //Is it orthographic?
    if (unity_OrthoParams.w > 0)
    {
        //Camera is orthographic.
        //Convert to camera space.
        float4 viewPos = mul(unity_CameraInvProjection, float4(pixel.x, pixel.y, -1, 1));
        //Perspective divide.
        viewPos /= viewPos.w;
    
        //Convert to world space.
        float3 worldPosPixel = mul(unity_MatrixInvV, viewPos).xyz;
        float3 worldSpaceViewForward = -UNITY_MATRIX_I_V._m02_m12_m22;
        
        chosenCameraPosition = worldPosPixel; //No need to get direction from camera's origin.
        chosenDirection = normalize(worldSpaceViewForward);

    }
    else
    {
        //Camera is Perspective.
        //Convert to camera space.
        float4 viewPos = mul(unity_CameraInvProjection, float4(pixel.x, pixel.y, 1, 1));
        //Perspective divide.
        viewPos /= viewPos.w; //This takes into account field of view, how the frustrum of the view plane is.
    
        //Convert to world space.
        float3 worldPosPixel = mul(unity_MatrixInvV, viewPos).xyz;

        //Take the pixel and get the direction from the origin to create perspective.
        float3 worldDirection = normalize(worldPosPixel - _WorldSpaceCameraPos);
        float3 worldSpaceViewForward = -UNITY_MATRIX_I_V._m02_m12_m22;

        chosenCameraPosition = _WorldSpaceCameraPos;
        chosenDirection = worldDirection;
    }

    float3 position;


    //Creating RayDesc.
    RayDesc ray;
    ray.Origin = chosenCameraPosition; 
    ray.Direction = chosenDirection; 
    ray.TMin = 0;
    ray.TMax = 10000;

    Payload payload;
    payload.color = float4(1,1,1,0);
    payload.distance = 99999;
    payload.direction = chosenDirection;
    payload.pixel = pixel;

    int currentReservoirTemporal = _UnigmaFrameCount % _TemporalReservoirsCount;
    int reservoirIndex = id.x + id.y*dim.x + currentReservoirTemporal*dim.x*dim.y;
    /*
    _reservoirs[reservoirIndex].Y = 0;
    _reservoirs[reservoirIndex].M = 0;
    _reservoirs[reservoirIndex].wSum = 0;
    _reservoirs[reservoirIndex].W = 0;
    _reservoirs[reservoirIndex].pHat = 0;



    //Samples Amount
    int samples = 30;
    int maxBounces = 8;

    float3 radiance = 0;
    float3 emittance = 0;
    float3 BRDF = 0;
    float hitObject = 0;
    float3 directionCache = chosenDirection;
    for(int i = 0; i < samples; i++)
    { 
        emittance = 0;
        BRDF = 0;
        ray.Origin = chosenCameraPosition; 
        ray.Direction = chosenDirection;
        payload.color = float4(1,1,1,0);
        payload.distance = 99999;
        payload.direction = chosenDirection;
        for(int j = 0; j < maxBounces; j++)
        {
            payload.pixel = float2(i, j) + _Time.xy + pixel;
            float bounceStrength = (1.0 / ((float)2*j+1.0f));
            TraceRay(_RaytracingAccelerationStructure, RAY_FLAG_NONE, 0xFF, 0, 1, 0, ray, payload);

            float3 rayDirection = payload.direction;
            //If it hit a point, divide by the amount of samples to get full energy.

            //float3 diffuse = RandomPointOnHemisphere(pixel, payload.direction,float2(i, j) + _Time.xy+pixel);
            //float3 specular = reflect(ray.d, hit.normal);

            if(payload.distance > 9999)
            {
                float3 toLightDir = normalize(_WorldSpaceLightPos0);
                float cos_theta_light = sdot(toLightDir, directionCache) + 0.25;
                emittance += float3(1,1,1)*2.75*bounceStrength;

                BRDF += float3(0.95,0.98,1)*bounceStrength*0.57; // sky.
                break;
            }
            hitObject = 1.0f;

            float cos_theta = sdot(rayDirection, payload.normal);
            BRDF += cos_theta*payload.color.xyz*bounceStrength;
            emittance += payload.color.xyz * payload.color.w *bounceStrength*0.0001*0.08;

             
            ray.Origin = ray.Origin + ray.Direction * (payload.distance - 0.0001);
            ray.Direction = rayDirection;

            directionCache = rayDirection;
        }
        radiance += (BRDF*(emittance))/(samples);
    }
    */
    /*
    TraceRay(_RaytracingAccelerationStructure, RAY_FLAG_NONE, 0xFF, 0, 1, 0, ray, payload);


    //Remove.
    //_UnigmaGlobalIllumination[dispatchIdx] = payload.color;

    position = ray.Origin + ray.Direction * (payload.distance - 0.0001);
    //specular.
    ray.Origin = position;
    ray.Direction = payload.direction;
    TraceRay(_RaytracingAccelerationStructure, RAY_FLAG_NONE, 0xFF, 0, 1, 0, ray, payload);
    */
    
    
    /*
    frameCount = 100;

    _UnigmaGlobalIllumination[dispatchIdx] = 0;
    for(int i = 0; i < frameCount; i++)
    {
        float inverseFrameSamples = 1.0f / frameCount;
        _UnigmaGlobalIllumination[dispatchIdx] += ShadePixel(payload, ray, _reservoirs[id.x + id.y*dim.x])*inverseFrameSamples;
    }
    */
    //float inverseFrameSamples = 1.0f / frameCount;
    //_UnigmaGlobalIllumination[dispatchIdx] += inverseFrameSamples;//ShadePixelRestirDI(payload, ray) * inverseFrameSamples;
    //_UnigmaGlobalIllumination[dispatchIdx] *= step(0.001, (_UnigmaFrameCount%frameCount)-1);

    int numSamples = 1;
    float inverseSamples = 1.0f / (float)numSamples;
    float4 targetResult = 0;

    for(int i = 0; i < numSamples; i++)
    {
        targetResult += ShadePixelRestirDI(payload, ray)*inverseSamples;
        targetResult += SampleIndirect(payload, ray)*inverseSamples;
        payload.pixel += _Time.xy + float2(i, i*i+i);
    }

    _UnigmaGlobalIllumination[dispatchIdx] = targetResult;

    //_UnigmaGlobalIllumination[dispatchIdx] += float4(radiance, hitObject)*inverseFrameSamples;//payload.color;

    //Add direct shadows.

}

[shader("miss")]
void MyMissShader(inout Payload payload : SV_RayPayload)
{
    payload.color = float4(1,1,1,0);
    payload.direction = 0;
    payload.distance = 99999;
    payload.pixel = -1;
    payload.normal = 0;
    
}