#include "HLSLSupport.cginc"
#include "UnityRaytracingMeshUtils.cginc"
#include "UnityShaderVariables.cginc"
#include "../../RayTraceHelpersUnigma.hlsl"
#include "UnityCG.cginc"

RWTexture2D<float4> _UnigmaDepthShadowsMap;
RWTexture2D<float4> _UnigmaShadowColors;
RWTexture2D<float4> _UnigmaDepthReflectionsMap;

Texture2D<float4> _UnigmaWaterNormals;
Texture2D<float4> _UnigmaWaterPosition;
RWTexture2D<float4> _UnigmaWaterReflections;

#pragma max_recursion_depth 8

RaytracingAccelerationStructure _RaytracingAccelerationStructure;
float4x4                        _Perspective_Matrix_VP;

float3 reflectUnigma( float3 i, float3 n )
{
  return i - 1.8510 * n * dot(n,i);
}

[shader("raygeneration")]
void DepthShadowsRaygenShader()
{
    uint3 id = DispatchRaysIndex();
    uint3 dim = DispatchRaysDimensions();

    //Convert to 0 - 1.
    float2 pixel = ((id.xy + float2(0.5, 0.5)) / float2(dim.x, dim.y)) * 2 - 1;
    
    float3 chosenCameraPosition;
    float3 chosenDirection;

    //Is it orthographic?
    if (unity_OrthoParams.w > 0)
    {
        //Camera is orthographic.
        //Convert to camera space.
        float4 viewPos = mul(unity_CameraInvProjection, float4(pixel.x, pixel.y, -1, 1));
        //Perspective divide.
        viewPos /= viewPos.w;
    
        //Convert to world space.
        float3 worldPosPixel = mul(unity_MatrixInvV, viewPos).xyz;
        float3 worldSpaceViewForward = -UNITY_MATRIX_I_V._m02_m12_m22;
        
        chosenCameraPosition = worldPosPixel; //No need to get direction from camera's origin.
        chosenDirection = normalize(worldSpaceViewForward);

    }
    else
    {
        //Camera is Perspective.
        //Convert to camera space.
        float4 viewPos = mul(unity_CameraInvProjection, float4(pixel.x, pixel.y, 1, 1));
        //Perspective divide.
        viewPos /= viewPos.w; //This takes into account field of view, how the frustrum of the view plane is.
    
        //Convert to world space.
        float3 worldPosPixel = mul(unity_MatrixInvV, viewPos).xyz;

        //Take the pixel and get the direction from the origin to create perspective.
        float3 worldDirection = normalize(worldPosPixel - _WorldSpaceCameraPos);
        float3 worldSpaceViewForward = -UNITY_MATRIX_I_V._m02_m12_m22;

        chosenCameraPosition = _WorldSpaceCameraPos;
        chosenDirection = worldDirection;
    }

    float depth = 0;
    float3 position;


    //Creating RayDesc.
    RayDesc ray;
    ray.Origin = chosenCameraPosition; 
    ray.Direction = chosenDirection; 
    ray.TMin = 0;
    ray.TMax = 10000;

    Payload payload;
    payload.color = float4(0, 0, 0, 0);
    payload.distance = 99999;
    payload.normal = 0;
    payload.direction = 0;

    TraceRay(_RaytracingAccelerationStructure, RAY_FLAG_NONE, 0x04, 0, 1, 0, ray, payload);

    float distanceFromPoint = 0.0353;
    position = ray.Origin+ (ray.Direction * payload.distance) + (payload.normal * distanceFromPoint);//ray.Origin + ray.Direction * (payload.distance - 0.0353);
    
    if (unity_OrthoParams.w > 0)
    {
        //isOrthographic.
        //But....actually we do something neat here. We use a perspective camera and take its viewing projection into the orthographic Camera.
        float4 clipPos = mul(_Perspective_Matrix_VP, float4(position,1));//UnityWorldToClipPos(position);
        depth = (clipPos.z) / (clipPos.w); //clipPos.w is always 1 in this case. Ignore.

        //We get back raw depth, so now interpolate with the near and far plane.
        //depth = lerp(_ProjectionParams.y, _ProjectionParams.z*0.01, clipPos.z);
    }
    else
    {
        //Perspective.
        float4 clipPos = mul(_Perspective_Matrix_VP, float4(position,1));//UnityWorldToClipPos(position);
        depth = (clipPos.z) / (clipPos.w); //clipPos.w is always 1 in this case. Ignore.
    }
   
    if(payload.distance > ray.TMax -1)
    {
        depth = 0;
    }

    //Store payload normal for the reflections later on.
    float3 reflectionNormal = payload.normal;
    float4 prevColor = payload.color;
    
    //Find the shadow.

    //Set new position and direction.
    //Get direction to light.
    float3 toLightDir = normalize(_WorldSpaceLightPos0);

    ray.Origin = position; 
    ray.Direction = toLightDir; 
    TraceRay(_RaytracingAccelerationStructure, RAY_FLAG_NONE, 0xFF, 0, 1, 0, ray, payload);

    _UnigmaDepthShadowsMap[id.xy] = float4(depth, payload.color.r*payload.pixel.y, payload.color.g*payload.pixel.y, 1);

    _UnigmaShadowColors[id.xy] = float4(payload.uv.x, payload.uv.y, payload.pixel.x, payload.pixel.y);

    //Begin reflection mapping.
    //Get the reflection vector.
        //Camera is Perspective.
    //Convert to camera space.
    float4 viewPos = mul(unity_CameraInvProjection, float4(pixel.x, pixel.y, 1, 1));
    //Perspective divide.
    viewPos /= viewPos.w; //This takes into account field of view, how the frustrum of the view plane is.
    
    //Convert to world space.
    float3 worldPosPixel = mul(unity_MatrixInvV, viewPos).xyz;

    //Take the pixel and get the direction from the origin to create perspective.
    float3 worldDirection = normalize(worldPosPixel - _WorldSpaceCameraPos);
    float3 worldSpaceViewForward = -UNITY_MATRIX_I_V._m02_m12_m22;
        
    float3 reflectedDirection = reflectUnigma(worldDirection, reflectionNormal);
    reflectedDirection = lerp(reflectionNormal,reflectedDirection, prevColor.z);
    ray.Origin = position;
    ray.Direction = reflectedDirection;
    TraceRay(_RaytracingAccelerationStructure, RAY_FLAG_NONE, 0xFF, 0, 1, 0, ray, payload);
    
    //Store the reflection.
    //Attenutate based on distance of ray.
    float distance = length(ray.Origin - position);
    float attenuation = 1 / (distance * distance);
    
    _UnigmaDepthReflectionsMap[id.xy] = float4(prevColor.xyz, 1);//lerp(0, float4(payload.direction, 1),  prevColor.z);

    /*
    //Compute water reflections.
    float3 waterNormal = _UnigmaWaterNormals[id.xy];
    float3 waterReflection = reflect(worldDirection, waterNormal);
    float3 waterOrigin = _UnigmaWaterPosition[id.xy];
    float3 waterPosition = waterOrigin + (waterNormal * distanceFromPoint);

    ray.Origin = waterPosition;
    ray.Direction = waterReflection;
    TraceRay(_RaytracingAccelerationStructure, RAY_FLAG_NONE, 0xFF, 0, 1, 0, ray, payload);
    _UnigmaWaterReflections[id.xy] = lerp(0, float4(payload.direction, 1),  prevColor.z);
    */
}

[shader("miss")]
void MyMissShader(inout Payload payload : SV_RayPayload)
{
    payload.color = 0;
    payload.distance = 99999;
    payload.normal = 0;
    payload.direction = 0;
    payload.pixel = 0;
    payload.uv = 0;
    
}
