//This is an example of compute shaders and acts as an active reference.

//A kernal is a function to be dispatched. This is the function that will run upon starting the compute shader.
#pragma kernel Main

//In here we can include hlsl
//#include file.hlsl

#include "../ShaderHelpers.hlsl"
#include "UnityCG.cginc"

//Let's define our vertexs. We will make this a struct.

//The vertices of the source mesh given by C#.
struct SourceVertex {
	float3 position; //This is in object space.
	float3 vertexColor;
};

//output vertices to send back to C#.

struct OutputVertex
{
	float3 position;
	float3 normal;
	float3 vertexColor;
	float2 uv;
};

//The triangles to output.

struct OutputTriangle
{
	float2 uv;
	float3 normal;
	OutputVertex vertices[3];
};

//This is the args buffer.
struct IndirectArgs {
	uint numVerticesPerInstance;
	uint numInstances;
	uint startVertexLocation;
	uint startInstanceLocation;
};

//Declare the variables needed. An array that is read only.
StructuredBuffer <SourceVertex> _sourceVertices;
StructuredBuffer <int> _sourceTriangles;

//The mesh to be instantiated each time.

StructuredBuffer <int> _sourceInstantiateTriangles;
StructuredBuffer <OutputVertex> _sourceInstantiateVertices;

AppendStructuredBuffer <OutputTriangle> _outputTriangles; //This acts as a stack.

RWStructuredBuffer<IndirectArgs> _IndirectArgsBuffer;

//These are the variables that are set by C#.
int _NumOfTriangles;
int _NumOfMeshesPerTriangle;
float _Width, _Height;
float4x4 _LocalToWorldMatrix;
float3 _CameraPosition;
float3 _Dimensions;

//Used for the initial triangle.
OutputVertex CreateVertex(SourceVertex v)
{
	OutputVertex vertex = (OutputVertex)0;
	vertex.position = mul(_LocalToWorldMatrix, float4(v.position, 1.0f)).xyz;
	vertex.vertexColor = v.vertexColor;
	return vertex;
}

//Used for the meshes to instantiate.
OutputVertex CreateVertex(OutputVertex v)
{
	OutputVertex vertex = (OutputVertex)0;
	vertex.position = mul(_LocalToWorldMatrix, float4(v.position, 1.0f)).xyz;
	vertex.uv = v.uv;
	return vertex;
}

void GetCenterAndBasis(OutputVertex a, OutputVertex b, OutputVertex c, out float3 position, out float3 normal, out float3x3 tangentSpace)
{
	//Center
	position = GetTriangleCenter(a.position, b.position, c.position);

	//To tangent space.
	GetTriangleNormalAndTSMatrix(a.position, b.position, c.position, normal, tangentSpace);
}

void AddTriangle(float3 a, float3 b, float3 c, uint3 id, float3 position, float3 normal)
{
	int numOfVertsPerMesh = _sourceInstantiateTriangles.Length / 3;
	OutputTriangle Triangles = (OutputTriangle)0;
	float randomMeshOffset = id.x * 2 + id.y;
		for (int i = 0; i < 3; i++)
		{
			
			OutputVertex vert = (OutputVertex)0;
			OutputVertex v = _sourceInstantiateVertices[_sourceInstantiateTriangles[i + id.z * 3]];
			vert.uv = v.uv;
			vert.normal = v.normal;

			//Take position and add some random variance to its position such that it fills a triangle.
			//Ensure it aligns to normal as well.
			float3x3 NormalUpMatrix = AlignToNormal(a, b, c);

			float3 randVec = rand(float3(randomMeshOffset+id.x + id.y / 2, randomMeshOffset+id.x + id.y / 3, randomMeshOffset+id.x + id.y / 5) + position);
			randVec = float3(rand(randVec), rand(randVec * randVec), rand(randVec * randVec * randVec));

			//Now that we have the position finished, let's randomize the rotation a bit by adding some twist.
			float theta = sin(_Time.y*0.5) * UNITY_PI * 2;
			//The axis is the up vector, which is cross(tangent, bitangent) which is our normal.
			float3x3 twist = AngleAxis3x3(theta, normal);

			float3x3 TwistedNormal = mul(twist, NormalUpMatrix);
			//Now we have the rotation matrix, let's rotate the position.
			vert.position = mul(TwistedNormal, v.position);


			vert.position = float3(vert.position.x * _Dimensions.x, vert.position.y * _Dimensions.y, vert.position.z * _Dimensions.z);
			vert.position += RandomPointInTriangle(a, b, c, randVec.xy);

			Triangles.vertices[i] = vert;
			Triangles.normal = normal;
		}
		//id.x is the triangle, so there are n meshes per triangle.
		//id.y is the number of triangles per mesh.
		_outputTriangles.Append(Triangles);//[id.z + (int)id.x* numOfVertsPerMesh * _NumOfMeshesPerTriangle + (int)id.y * numOfVertsPerMesh] = Triangles;

}


//Now write the main function. ID is the thread currently running.
//Try to do it in multiplies of 8 meshes.
[numthreads(64, 8, 2)]
void Main(uint3 id : SV_DispatchThreadID)
{
	//Ensure it isn't using more compute than triangles.
	if ((int)id.x >= _NumOfTriangles)
		return;
	if ((int)id.y >= _NumOfMeshesPerTriangle)
		return;

	//Now take the triangle, add in a middle point, extrodue it by the height, and save it as a buffer.
	int indexOfTriangle = id.x * 3; //This tells us where we are on this thread to compute the triangle. This is like a pixel shader but manually...
	OutputVertex inputTriangleVert[3];
	inputTriangleVert[0] = CreateVertex(_sourceVertices[_sourceTriangles[indexOfTriangle]]);
	inputTriangleVert[1] = CreateVertex(_sourceVertices[_sourceTriangles[indexOfTriangle + 1]]);
	inputTriangleVert[2] = CreateVertex(_sourceVertices[_sourceTriangles[indexOfTriangle + 2]]);


	float3 position, normal;
	float3x3 tangentSpace;
	GetCenterAndBasis(
		inputTriangleVert[0],
		inputTriangleVert[1],
		inputTriangleVert[2],
		position,
		normal,
		tangentSpace
	);
	
	

	OutputTriangle Triangles = (OutputTriangle)0;
	Triangles.vertices[0] = inputTriangleVert[0];
	Triangles.vertices[1] = inputTriangleVert[1];
	Triangles.vertices[2] = inputTriangleVert[2];
	Triangles.normal = normal;

	_outputTriangles.Append(Triangles);
	float grassColor = inputTriangleVert[0].vertexColor.g + inputTriangleVert[1].vertexColor.g + inputTriangleVert[2].vertexColor.g;
	if (grassColor/3 < 0.85f)
	{
		return;
	}
	
	AddTriangle(inputTriangleVert[0].position, inputTriangleVert[1].position, inputTriangleVert[2].position, id, position, normal);
	
}