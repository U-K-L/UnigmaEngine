#include "HLSLSupport.cginc"
#include "UnityRaytracingMeshUtils.cginc"
#include "UnityShaderVariables.cginc"
#include "../../RayTraceHelpersUnigma.hlsl"
#include "UnityCG.cginc"


RWTexture2D<float4> _UnigmaGlobalIllumination;
Texture2D<float4> _CameraMotionVectorsTextureReSTIR;
Texture2D<float4> _UnigmaDepthShadowsMap;

RWStructuredBuffer<UnigmaLight> _unigmaLights;
RWStructuredBuffer<Sample> _samples;
RWStructuredBuffer<Reservoir> _reservoirs;
RWStructuredBuffer<ReservoirPath> _reservoirPaths;
RWStructuredBuffer<UnigmaDispatchInfo> _UnigmaDispatchInfo;

int _UnigmaFrameCount;
int _NumberOfLights;
int _TemporalReservoirsCount;
int _PassCount;

RaytracingAccelerationStructure _RaytracingAccelerationStructure;
#pragma max_recursion_depth 1

void InitializeRay(inout float3 orig, inout float3 dir)
{

}

void InitializeReservoir(inout Reservoir reservoir)
{
    reservoir.W = 0;
    reservoir.Y = 0;
    reservoir.pHat = 0;
    reservoir.M = 0;
    reservoir.wSum = 0;
    reservoir.x1 = 0;
    reservoir.age = 0;
}


//Just a basic unbiased direct lighter for one light.
float4 ShadePixelRestirDI(inout Payload payload, inout RayDesc ray)
{

    //----------------Generate Sample paths X0 and X1 ------------------//
    //distance from the hit point.
    //distance from the hit point.
    float distanceFromPoint = 0.1;
    uint3 id = DispatchRaysIndex();
    uint3 dim = DispatchRaysDimensions();
    float2 UV = ((id.xy + float2(0.5, 0.5)) / float2(dim.x, dim.y)) * 2 - 1;
    float2 motionVector = _CameraMotionVectorsTextureReSTIR[id.xy];
    float2 prevUV = UV - motionVector;
    float2 invPrevUV = UV + motionVector;

        
    //if(_PassCount > 0)
    //    prevUV = UV;

    //Inverse previous UV back to id.xy.

    float2 previousFrameIndex = ((prevUV*dim.xy + dim.xy) / 2) - 0.5f;

    uint randSeed = GetRandomSeed(id.xy, 0);
    int currentReservoirTemporal = 0;//_UnigmaFrameCount % _TemporalReservoirsCount;
    int reservoirIndex = id.x + id.y*dim.x; //id.x + id.y*dim.x + currentReservoirTemporal*dim.x*dim.y;

    int storageReservoirTemporal =  1;//(_UnigmaFrameCount+1) % _TemporalReservoirsCount;
    int storageReservoirIndex = id.x + id.y*dim.x + storageReservoirTemporal*dim.x*dim.y;
    int MHistoryLength = 25;


    //Hit the first object. This is sample x0. Starts from the pixel plane, shoots direction of camera and perspective.
    RayDesc Sx0Ray;
    Payload Sx0Payload;
    CreateSample(Sx0Ray, Sx0Payload,  ray.Origin, ray.Direction);

    //Next we set x1 this is our object that was hit.
    RayDesc Sx1Ray;
    Payload Sx1Payload;
    //initialize sample.
    CreateSample(Sx1Ray, Sx1Payload,  Sx0Ray.Origin, Sx0Ray.Direction);
    TraceRay(_RaytracingAccelerationStructure, RAY_FLAG_NONE, 0xFF, 0, 1, 0, Sx1Ray, Sx1Payload);

    float3 x2Origin = Sx1Ray.Origin + (Sx1Ray.Direction * Sx1Payload.distance) + (Sx1Payload.normal * distanceFromPoint);

    //Get reservoir from the previous pass.
    Reservoir currentReservoir = _reservoirs[storageReservoirIndex];
    //Store this reservoir into the next temporal buffer for the next pass to use.
    _reservoirs[reservoirIndex] = currentReservoir;

    //Spatial reuse.
    Reservoir spatialReservoir;
    InitializeReservoir(spatialReservoir);


    //Combine with spatial Reservoir
    addReservoirSample(spatialReservoir, currentReservoir.Y, currentReservoir.pHat * currentReservoir.W * currentReservoir.M, currentReservoir.M, randSeed);

    //UpdateReservoirWeight(spatialReservoir, x2Origin, Sx1Payload, randSeed);
    int _NumberOfNeighbors = 15;
    int _NeighborsRadius = 5;
    for(int i = 0; i < _NumberOfNeighbors; i++)
    {
        //Sample neighbors in a grid fashion to get index of what neighbor to sample from.
        float2 neighborIndex = 0;
        uint randSeed = GetRandomSeed(id.xy, i);
        neighborIndex.x = int(rand(randSeed)  * _NeighborsRadius * 2.f) - _NeighborsRadius;
		neighborIndex.y = int( (rand(randSeed) + rand(randSeed + 1) )  * _NeighborsRadius * 2.f) - _NeighborsRadius;
		neighborIndex.x = max(0, min(dim.x - 1, id.x + neighborIndex.x));
		neighborIndex.y = max(0, min(dim.y - 1, id.y + neighborIndex.y));

        //Get the reservoir of neighboring pixels.
        int currentReservoirTemporal = 1;//_UnigmaFrameCount % _TemporalReservoirsCount;
        int reservoirIndex = neighborIndex.x + neighborIndex.y*dim.x + currentReservoirTemporal*dim.x*dim.y;
        Reservoir neighborReservoir = _reservoirs[reservoirIndex];
        addReservoirSample(spatialReservoir, neighborReservoir.Y, neighborReservoir.pHat * neighborReservoir.W * neighborReservoir.M, neighborReservoir.M, randSeed);
    }

    float spatialPDF = UpdateReservoirWeight(spatialReservoir, _unigmaLights[spatialReservoir.Y], x2Origin, Sx1Payload, randSeed);

    
    //----------------------------------
    //------------------------------------FINAL GATHER------------------------------//

    //Now that we have stored our reservoirs we look for the current light to sample.
    uint lightIndex = spatialReservoir.Y; //This new light index comes from the weighted reservoir we computed.

    float weightFinal = spatialReservoir.W;

    float4 lightColor = float4(_unigmaLights[lightIndex].color, 1);

    return lightColor*spatialPDF*weightFinal*Sx1Payload.color;
}

float4 SampleIndirect(inout Payload payload, inout RayDesc ray)
{
    float distanceFromPoint = 0.1;
    uint3 id = DispatchRaysIndex();
    uint3 dim = DispatchRaysDimensions();
    float2 UV = ((id.xy + float2(0.5, 0.5)) / float2(dim.x, dim.y)) * 2 - 1;
    float2 motionVector = _CameraMotionVectorsTextureReSTIR[id.xy];
    float2 prevUV = UV - motionVector;
    float2 invPrevUV = UV + motionVector;

        
    //if(_PassCount > 0)
    //    prevUV = UV;

    //Inverse previous UV back to id.xy.

    float2 previousFrameIndex = ((prevUV*dim.xy + dim.xy) / 2) - 0.5f;

    uint randSeed = GetRandomSeed(id.xy, 0);
    int currentReservoirTemporal = 0;//_UnigmaFrameCount % _TemporalReservoirsCount;
    int reservoirIndex = id.x + id.y*dim.x; //id.x + id.y*dim.x + currentReservoirTemporal*dim.x*dim.y;

    int storageReservoirTemporal =  1;//(_UnigmaFrameCount+1) % _TemporalReservoirsCount;
    int storageReservoirIndex = id.x + id.y*dim.x + storageReservoirTemporal*dim.x*dim.y;

    ReservoirPath currentReservoirPath = _reservoirPaths[storageReservoirIndex];
    //Store this reservoir into the next temporal buffer for the next pass to use.
    _reservoirPaths[reservoirIndex] = currentReservoirPath;
    //return currentReservoirPath.radiance.r;
    
        //Hit the first object. This is sample x0. Starts from the pixel plane, shoots direction of camera and perspective.
    RayDesc Sx0Ray;
    Payload Sx0Payload;
    CreateSample(Sx0Ray, Sx0Payload,  ray.Origin, ray.Direction);

    //Next we set x1 this is our object that was hit.
    RayDesc Sx1Ray;
    Payload Sx1Payload;
    //initialize sample.
    CreateSample(Sx1Ray, Sx1Payload,  Sx0Ray.Origin, Sx0Ray.Direction);
    TraceRay(_RaytracingAccelerationStructure, RAY_FLAG_NONE, 0xFF, 0, 1, 0, Sx1Ray, Sx1Payload);

    //Getting that hit point location. Will be the origin of x2 path.
    float3 x2Origin = Sx1Ray.Origin + (Sx1Ray.Direction * Sx1Payload.distance) + (Sx1Payload.normal * distanceFromPoint);

    //Direction from BSDF... this comes from the shader.
    float3 x2Direction = Sx1Payload.direction;
    
    //Now make x2 sample, this goes and hits surface from the first bounce.
    RayDesc Sx2Ray;
    Payload Sx2Payload;
    CreateSample(Sx2Ray, Sx2Payload,  x2Origin, x2Direction); //From hit point to pdf direction.
    TraceRay(_RaytracingAccelerationStructure, RAY_FLAG_NONE, 0xFF, 0, 1, 0, Sx2Ray, Sx2Payload);

    //Now start at the new surface hit from the BSDF bounce. This is our reservoirGI.
    float3 xNOrigin = Sx2Ray.Origin + (Sx2Ray.Direction * Sx2Payload.distance) + (Sx2Payload.normal * distanceFromPoint);
    float3 xNDirection = Sx2Payload.direction;
    int maxBounces = 1;
    float radianceIndirect = Sx2Payload.color.w;
    RayDesc SxNRay;
    Payload SxNPayload;
    CreateSample(SxNRay, SxNPayload,  xNOrigin, xNDirection); //Start at that new surface from bounce...
    SxNPayload.normal = Sx2Payload.normal;
    SxNPayload.color = Sx2Payload.color;
    for(int i = 0; i < maxBounces; i++)
    {
        TraceRay(_RaytracingAccelerationStructure, RAY_FLAG_NONE, 0xFF, 0, 1, 0, SxNRay, SxNPayload);
        xNOrigin = SxNRay.Origin + (SxNRay.Direction * SxNPayload.distance) + (SxNPayload.normal * distanceFromPoint);
        xNDirection = SxNPayload.direction;
        radianceIndirect += SxNPayload.color.w;
        SxNRay.Origin = xNOrigin;
        SxNRay.Direction = xNDirection;
        //CreateSample(SxNRay, SxNPayload,  xNOrigin, xNDirection); //Start at that new surface from bounce...
    }

    //return SxNPayload.color * SxNPayload.color.w;

    //Create a surface based on secondary surface.
    Surface Ssurface;
    CreateSurface(Ssurface, xNOrigin, SxNPayload.normal, normalize(xNOrigin - x2Origin), SxNPayload.color.xyz, SxNPayload.color.w);

    
    ReservoirPath spatialReservoirPath;
    InitiateReservoirPath(spatialReservoirPath, Ssurface.position, Ssurface.normal.xyz, Ssurface.emittance); 

    addReservoirSamplePath(spatialReservoirPath, currentReservoirPath, currentReservoirPath.radiance, currentReservoirPath.M, randSeed);
    bool isSelected = false;

    float selectedPdf = 1;

    float4 ambientColor = 0;

    float4 currentNormalDepth = _UnigmaDepthShadowsMap[id.xy];//unpackNormalDepth(prevNormalDepth[neighborID]);
    currentNormalDepth = float4( currentReservoirPath.normal, currentNormalDepth.r);
    float _GeometricSimilarityThreshold = 10.5;
    int _NumberOfNeighbors = 15;
    int _NeighborsRadius = 8;
    float numberOfTimes = 0;
    for(int i = 0; i < _NumberOfNeighbors; i++)
    {
        //Sample neighbors in a grid fashion to get index of what neighbor to sample from.
        float2 neighborIndex = 0;
        uint randSeed = GetRandomSeed(id.xy, i);
        neighborIndex.x = int(rand(randSeed)  * _NeighborsRadius * 2.f) - _NeighborsRadius;
		neighborIndex.y = int((rand(randSeed) + rand(randSeed + 1) )*0.5 * _NeighborsRadius * 2.f) - _NeighborsRadius;
		neighborIndex.x = max(0, min(dim.x - 1, id.x + neighborIndex.x));
		neighborIndex.y = max(0, min(dim.y - 1, id.y + neighborIndex.y));

        //Get the reservoir of neighboring pixels.
        int currentReservoirTemporal = 1;//_UnigmaFrameCount % _TemporalReservoirsCount;
        int reservoirIndex = neighborIndex.x + neighborIndex.y*dim.x + currentReservoirTemporal*dim.x*dim.y;

        ReservoirPath neighborReservoirPath = _reservoirPaths[reservoirIndex];
        
        Surface neighborSurface;
        //(inout Surface surface, float3 position, float3 normal, float3 viewDir, float3 color, float emittance)
        CreateSurface(neighborSurface, neighborReservoirPath.position, neighborReservoirPath.normal, normalize(neighborReservoirPath.position - xNOrigin), neighborReservoirPath.radiance.xyz, neighborReservoirPath.radiance.r);

        // Check geometric similarity.
        float4 neighborNormalDepth = _UnigmaDepthShadowsMap[neighborIndex];//unpackNormalDepth(prevNormalDepth[neighborID]);
        neighborNormalDepth = float4( neighborReservoirPath.normal, neighborNormalDepth.r);

        if (distance(currentNormalDepth, neighborNormalDepth) > _GeometricSimilarityThreshold)
            continue;

        float3 neighborOutgoingRadiance = GetTargetFunctionSurface(Ssurface, neighborReservoirPath.position, neighborReservoirPath.radiance);

        isSelected = addReservoirSamplePath(spatialReservoirPath, neighborReservoirPath, neighborOutgoingRadiance, neighborReservoirPath.M, randSeed);
        ambientColor += step(0.001, neighborOutgoingRadiance.r) * SxNPayload.color;
        numberOfTimes++;
        selectedPdf = spatialReservoirPath.radiance;
        if(isSelected)
        {
            selectedPdf = neighborOutgoingRadiance;
            break;
        }
    }


    ambientColor /= (float)numberOfTimes;
    float pHat = selectedPdf;
    //currentReservoirPath.wSum =  (targetNumer == 0.0) ? 0.0 : (currentReservoirPath.wSum * targetNumer) / targetDenom;
    spatialReservoirPath.wSum = pHat == 0.f ? 0.f : spatialReservoirPath.wSum / (spatialReservoirPath.M * pHat);
    //return pHat;
        
    float visibility = 1.0;
    
    RayDesc SxVRay;
    Payload SxVPayload;
    CreateSample(SxVRay, SxVPayload,  x2Origin, normalize(currentReservoirPath.position - x2Origin)); //Start at that new surface from bounce...

    
    TraceRay(_RaytracingAccelerationStructure, RAY_FLAG_NONE, 0xFF, 0, 1, 0, SxVRay, SxVPayload);
    visibility = step(0.0001, SxVPayload.color.w);


    return float4(spatialReservoirPath.radiance * spatialReservoirPath.wSum * SxNPayload.color.xyz, 0) + ambientColor;
}

[shader("raygeneration")]
void RestirGlobalIllumantionRayGen()
{
    uint2 dispatchIdx = DispatchRaysIndex().xy;
   
    uint3 id = DispatchRaysIndex();
    uint3 dim = DispatchRaysDimensions();

    //Convert to 0 - 1.
    float2 pixel = ((id.xy + float2(0.5, 0.5)) / float2(dim.x, dim.y)) * 2 - 1;
    
    float3 chosenCameraPosition;
    float3 chosenDirection;

    float frameCount = 10;
    //if(_UnigmaFrameCount > frameCount)
    //    return;
    //Is it orthographic?
    if (unity_OrthoParams.w > 0)
    {
        //Camera is orthographic.
        //Convert to camera space.
        float4 viewPos = mul(unity_CameraInvProjection, float4(pixel.x, pixel.y, -1, 1));
        //Perspective divide.
        viewPos /= viewPos.w;
    
        //Convert to world space.
        float3 worldPosPixel = mul(unity_MatrixInvV, viewPos).xyz;
        float3 worldSpaceViewForward = -UNITY_MATRIX_I_V._m02_m12_m22;
        
        chosenCameraPosition = worldPosPixel; //No need to get direction from camera's origin.
        chosenDirection = normalize(worldSpaceViewForward);

    }
    else
    {
        //Camera is Perspective.
        //Convert to camera space.
        float4 viewPos = mul(unity_CameraInvProjection, float4(pixel.x, pixel.y, 1, 1));
        //Perspective divide.
        viewPos /= viewPos.w; //This takes into account field of view, how the frustrum of the view plane is.
    
        //Convert to world space.
        float3 worldPosPixel = mul(unity_MatrixInvV, viewPos).xyz;

        //Take the pixel and get the direction from the origin to create perspective.
        float3 worldDirection = normalize(worldPosPixel - _WorldSpaceCameraPos);
        float3 worldSpaceViewForward = -UNITY_MATRIX_I_V._m02_m12_m22;

        chosenCameraPosition = _WorldSpaceCameraPos;
        chosenDirection = worldDirection;
    }

    float3 position;


    //Creating RayDesc.
    RayDesc ray;
    ray.Origin = chosenCameraPosition; 
    ray.Direction = chosenDirection; 
    ray.TMin = 0;
    ray.TMax = 10000;

    Payload payload;
    payload.color = float4(1,1,1,0);
    payload.distance = 99999;
    payload.direction = chosenDirection;
    payload.pixel = pixel;

    int numSamples = 1;
    float inverseSamples = 1.0f / (float)numSamples;
    float4 targetResult = 0;

    for(int i = 0; i < numSamples; i++)
    {
        
        targetResult += ShadePixelRestirDI(payload, ray)*inverseSamples*0.5;
        float4 indirectSample = SampleIndirect(payload, ray)*inverseSamples;
        float4x4 saturation = saturationMatrix(3.6);
        float4x4 constrast = contrastMatrix(0.60);
        indirectSample = mul(indirectSample, saturation);
        indirectSample = mul(indirectSample, constrast);
        indirectSample *= 0.5;
        targetResult += indirectSample;
        payload.pixel += _Time.xy + float2(i, i*i+i);
    }

    _UnigmaGlobalIllumination[dispatchIdx] += targetResult;


    //_UnigmaGlobalIllumination[dispatchIdx] += float4(radiance, hitObject)*inverseFrameSamples;//payload.color;

    //Add direct shadows.

}

[shader("miss")]
void MyMissShader(inout Payload payload : SV_RayPayload)
{
    payload.color = float4(1,1,1,0);
    payload.direction = 0;
    payload.distance = 99999;
    payload.pixel = -1;
    payload.normal = 0;
    
}