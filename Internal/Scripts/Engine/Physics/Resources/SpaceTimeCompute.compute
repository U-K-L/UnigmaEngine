// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel ResetVectorField
#pragma kernel HashVectors
#pragma kernel BitonicSort
#pragma kernel CalculateCellOffsets
#pragma kernel AttractionField
#pragma kernel GatherSpaceTime

#include "../../../../Shaders/PhysicsHelpers.hlsl"

int _NumOfVectors;
int _NumOfPhysicsObjects;
float3 _BoxSize;
int _Resolution;

int biBlock;
int biDim;

float _GlobalTemperature;

RWStructuredBuffer<SpaceTimePoint> _VectorField;
RWStructuredBuffer<PhysicsObject> _PhysicsObjects;

RWStructuredBuffer<int> _VectorIndices;
RWStructuredBuffer<int> _VectorCellIndices;
RWStructuredBuffer<int> _VectorCellOffsets;


float Poly6Kernel(float distance2, float radius = 1.0f)
{
    float result = 0.0;
    float h = 1 * radius;

    float h9 = pow(h, 9.0f);
    float constPoly6 = 315.0f / (64.0f * 3.141592653589f * h9);
    float poly6 = constPoly6 * pow((h * h) - (distance2 * distance2), 3.0f);
    result = poly6;

    return result;
}

int3 GetCellVectorField(float3 position)
{
    float3 spacing = (_BoxSize / (_Resolution-1));
    float3 halfContainerSize = _BoxSize / 2.0f;
    
    int3 index = ((position + halfContainerSize) / spacing);
    /*
    float3 shiftToCenter = position + halfContainerSize;
    float3 normalized = (shiftToCenter / _BoxSize);
        */

    
    return index;
}

inline uint HashCellVectorField(in int3 cellIndex)
{
    /*
    const uint p1 = 73856093;
    const uint p2 = 19349663;
    const uint p3 = 83492791;
    
    uint n = p1 * cellIndex.x ^ p2 * cellIndex.y ^ p3 * cellIndex.z;
    n %= _NumOfVectors;
    return n;
    */
    
    return cellIndex.x * _Resolution * _Resolution + cellIndex.y * _Resolution + cellIndex.z;
}

[numthreads(256, 1, 1)]
void HashVectors(uint3 id : SV_DispatchThreadID)
{
    //_Particles[id.x].debugVector = 0.25;
    _VectorCellOffsets[id.x] = 99999999;
    _VectorCellIndices[id.x] = _NumOfVectors - 1;
    _VectorIndices[id.x] = id.x;
    
    uint vectorIndex = _VectorIndices[id.x];
    
    if (id.x < _NumOfVectors)
    {
        int3 cell = GetCellVectorField(_VectorField[vectorIndex].index);
        _VectorCellIndices[vectorIndex] = HashCellVectorField(cell);

    }
}

[numthreads(256, 1, 1)]
void BitonicSort(uint3 id : SV_DispatchThreadID)
{

    if (id.x >= _NumOfVectors)
    {
        return;
    }

    uint index = _VectorCellIndices[id.x];
    uint i = id.x + id.y * 256 * 1024;
    uint j = i ^ biBlock;

    if (j < i || i >= _NumOfVectors)
        return;

    uint key_i = _VectorIndices[i];
    uint key_j = _VectorIndices[j];
    float value_i = _VectorCellIndices[key_i];
    float value_j = _VectorCellIndices[key_j];

    float diff = (value_i - value_j) * ((i & biDim) == 0 ? 1 : -1);
    if (diff > 0)
    {
        _VectorIndices[i] = key_j;
        _VectorIndices[j] = key_i;
    }

}

[numthreads(256, 1, 1)]
void CalculateCellOffsets(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= _NumOfVectors)
    {
        return;
    }
    
    uint particleIndex = _VectorIndices[id.x];
    uint cellIndex = _VectorCellIndices[particleIndex];

	//Sets this value at the index cellIndex. However it waits for all threads and ensures this is the minimum value at that index.
    InterlockedMin(_VectorCellOffsets[cellIndex], id.x);
}



[numthreads(256, 1, 1)]
void ResetVectorField(uint3 id : SV_DispatchThreadID)
{

    int3 cell = GetCellVectorField(_VectorField[id.x].position);
    
    int vectorIndex = cell.x * _Resolution * _Resolution + cell.y * _Resolution + cell.z; //HashCellVectorField(cell);
    
    //_VectorField[vectorIndex].previousDirection = _VectorField[vectorIndex].direction;
    _VectorField[vectorIndex].force = float3(0, -9.8f, 0);
    
    float kelvinSum = 0.0f;
    //Diffusion process.

    for (int i = -2; i < 2; ++i)
    {
        for (int j = -2; j < 2; ++j)
        {
            for (int k = -2; k < 2; ++k)
            {
                
                int3 neighborCell = int3(i, j, k);
                int hashedNeighborIndex = cell.x * _Resolution * _Resolution + cell.y * _Resolution + cell.z; //HashCellVectorField(neighborCell);

                int linearIndex = i * _Resolution * _Resolution + j * _Resolution + k;
                
                hashedNeighborIndex += linearIndex;
                
                if (hashedNeighborIndex >= 0 && hashedNeighborIndex < _NumOfVectors)
                {
                    float distance2 = distance(_VectorField[vectorIndex].position, _VectorField[hashedNeighborIndex].position);
                    
                    if (0.01f < distance2 && distance2 < _Resolution*2)
                    {
                        //newton cooling law.
                        float k = _VectorField[vectorIndex].conductivity;;
                        float Tk = k * (_VectorField[hashedNeighborIndex].kelvin - _VectorField[vectorIndex].kelvin) * 0.01f;
                        kelvinSum += Poly6Kernel(distance2, _Resolution*2) * Tk;
                    }
                }

            }
        }
    }
    
    float externalTemperature = 0.000995f * (_GlobalTemperature - _VectorField[vectorIndex].kelvin);
    _VectorField[vectorIndex].tempVal += kelvinSum;// + externalTemperature;
    _VectorField[id.x].particlesCount = 0;
    

}

[numthreads(256, 1, 1)]
void AttractionField(uint3 id : SV_DispatchThreadID)
{
    
    int3 cell = GetCellVectorField(_VectorField[id.x].position);
    
    int vectorIndex = HashCellVectorField(cell);
    
    for (int i = 0; i < _NumOfPhysicsObjects; i++)
    {

        //int posCell = HashCellVectorField(GetCellVectorField(_UnigmaPhysicsPoints[i].position));
        
        float dist = 1.0f / pow(distance(_PhysicsObjects[i].position, _VectorField[vectorIndex].position), 2);
        dist = min(dist, 2);
        float3 toObjDir = normalize(_PhysicsObjects[i].position - _VectorField[vectorIndex].position);

        //_VectorField[vectorIndex].force += toObjDir * _PhysicsObjects[i].strength * dist * _PhysicsObjects[i].radius;
        
        float k = _VectorField[vectorIndex].conductivity;
        float Tk = k * (_PhysicsObjects[i].kelvin - _VectorField[vectorIndex].kelvin) * 0.01f;
        
        _VectorField[vectorIndex].tempVal += dist * _PhysicsObjects[i].radius * Tk;

    }
   
    //_VectorField[vectorIndex].kelvin *= 0.5;

}

[numthreads(256, 1, 1)]
void GatherSpaceTime(uint3 id : SV_DispatchThreadID)
{
    
    int3 cell = GetCellVectorField(_VectorField[id.x].position);
    
    int vectorIndex = HashCellVectorField(cell);

    _VectorField[vectorIndex].kelvin += _VectorField[vectorIndex].tempVal;
    _VectorField[vectorIndex].tempVal = 0;

}
